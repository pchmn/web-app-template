// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { AdminSetupMonitoringData, AdminSetupMonitoringError, DockerGetContainersData, DockerGetContainersError, DockerRestartContainerData, DockerRestartContainerError, DockerGetConfigData, DockerGetConfigError, DockerGetContainersByAppNameMatchData, DockerGetContainersByAppNameMatchError, DockerGetContainersByAppLabelData, DockerGetContainersByAppLabelError, DockerGetStackContainersByAppNameData, DockerGetStackContainersByAppNameError, DockerGetServiceContainersByAppNameData, DockerGetServiceContainersByAppNameError, ProjectCreateData, ProjectCreateError, ProjectOneData, ProjectOneError, ProjectAllData, ProjectAllError, ProjectRemoveData, ProjectRemoveError, ProjectUpdateData, ProjectUpdateError, ProjectDuplicateData, ProjectDuplicateError, ApplicationCreateData, ApplicationCreateError, ApplicationOneData, ApplicationOneError, ApplicationReloadData, ApplicationReloadError, ApplicationDeleteData, ApplicationDeleteError, ApplicationStopData, ApplicationStopError, ApplicationStartData, ApplicationStartError, ApplicationRedeployData, ApplicationRedeployError, ApplicationSaveEnvironmentData, ApplicationSaveEnvironmentError, ApplicationSaveBuildTypeData, ApplicationSaveBuildTypeError, ApplicationSaveGithubProviderData, ApplicationSaveGithubProviderError, ApplicationSaveGitlabProviderData, ApplicationSaveGitlabProviderError, ApplicationSaveBitbucketProviderData, ApplicationSaveBitbucketProviderError, ApplicationSaveGiteaProviderData, ApplicationSaveGiteaProviderError, ApplicationSaveDockerProviderData, ApplicationSaveDockerProviderError, ApplicationSaveGitProdiverData, ApplicationSaveGitProdiverError, ApplicationMarkRunningData, ApplicationMarkRunningError, ApplicationUpdateData, ApplicationUpdateError, ApplicationRefreshTokenData, ApplicationRefreshTokenError, ApplicationDeployData, ApplicationDeployError, ApplicationCleanQueuesData, ApplicationCleanQueuesError, ApplicationReadTraefikConfigData, ApplicationReadTraefikConfigError, ApplicationUpdateTraefikConfigData, ApplicationUpdateTraefikConfigError, ApplicationReadAppMonitoringData, ApplicationReadAppMonitoringError, ApplicationMoveData, ApplicationMoveError, MysqlCreateData, MysqlCreateError, MysqlOneData, MysqlOneError, MysqlStartData, MysqlStartError, MysqlStopData, MysqlStopError, MysqlSaveExternalPortData, MysqlSaveExternalPortError, MysqlDeployData, MysqlDeployError, MysqlChangeStatusData, MysqlChangeStatusError, MysqlReloadData, MysqlReloadError, MysqlRemoveData, MysqlRemoveError, MysqlSaveEnvironmentData, MysqlSaveEnvironmentError, MysqlUpdateData, MysqlUpdateError, MysqlMoveData, MysqlMoveError, MysqlRebuildData, MysqlRebuildError, PostgresCreateData, PostgresCreateError, PostgresOneData, PostgresOneError, PostgresStartData, PostgresStartError, PostgresStopData, PostgresStopError, PostgresSaveExternalPortData, PostgresSaveExternalPortError, PostgresDeployData, PostgresDeployError, PostgresChangeStatusData, PostgresChangeStatusError, PostgresRemoveData, PostgresRemoveError, PostgresSaveEnvironmentData, PostgresSaveEnvironmentError, PostgresReloadData, PostgresReloadError, PostgresUpdateData, PostgresUpdateError, PostgresMoveData, PostgresMoveError, PostgresRebuildData, PostgresRebuildError, RedisCreateData, RedisCreateError, RedisOneData, RedisOneError, RedisStartData, RedisStartError, RedisReloadData, RedisReloadError, RedisStopData, RedisStopError, RedisSaveExternalPortData, RedisSaveExternalPortError, RedisDeployData, RedisDeployError, RedisChangeStatusData, RedisChangeStatusError, RedisRemoveData, RedisRemoveError, RedisSaveEnvironmentData, RedisSaveEnvironmentError, RedisUpdateData, RedisUpdateError, RedisMoveData, RedisMoveError, RedisRebuildData, RedisRebuildError, MongoCreateData, MongoCreateError, MongoOneData, MongoOneError, MongoStartData, MongoStartError, MongoStopData, MongoStopError, MongoSaveExternalPortData, MongoSaveExternalPortError, MongoDeployData, MongoDeployError, MongoChangeStatusData, MongoChangeStatusError, MongoReloadData, MongoReloadError, MongoRemoveData, MongoRemoveError, MongoSaveEnvironmentData, MongoSaveEnvironmentError, MongoUpdateData, MongoUpdateError, MongoMoveData, MongoMoveError, MongoRebuildData, MongoRebuildError, MariadbCreateData, MariadbCreateError, MariadbOneData, MariadbOneError, MariadbStartData, MariadbStartError, MariadbStopData, MariadbStopError, MariadbSaveExternalPortData, MariadbSaveExternalPortError, MariadbDeployData, MariadbDeployError, MariadbChangeStatusData, MariadbChangeStatusError, MariadbRemoveData, MariadbRemoveError, MariadbSaveEnvironmentData, MariadbSaveEnvironmentError, MariadbReloadData, MariadbReloadError, MariadbUpdateData, MariadbUpdateError, MariadbMoveData, MariadbMoveError, MariadbRebuildData, MariadbRebuildError, ComposeCreateData, ComposeCreateError, ComposeOneData, ComposeOneError, ComposeUpdateData, ComposeUpdateError, ComposeDeleteData, ComposeDeleteError, ComposeCleanQueuesData, ComposeCleanQueuesError, ComposeLoadServicesData, ComposeLoadServicesError, ComposeFetchSourceTypeData, ComposeFetchSourceTypeError, ComposeRandomizeComposeData, ComposeRandomizeComposeError, ComposeIsolatedDeploymentData, ComposeIsolatedDeploymentError, ComposeGetConvertedComposeData, ComposeGetConvertedComposeError, ComposeDeployData, ComposeDeployError, ComposeRedeployData, ComposeRedeployError, ComposeStopData, ComposeStopError, ComposeStartData, ComposeStartError, ComposeGetDefaultCommandData, ComposeGetDefaultCommandError, ComposeRefreshTokenData, ComposeRefreshTokenError, ComposeDeployTemplateData, ComposeDeployTemplateError, ComposeTemplatesData, ComposeTemplatesError, ComposeGetTagsData, ComposeGetTagsError, ComposeMoveData, ComposeMoveError, ComposeProcessTemplateData, ComposeProcessTemplateError, ComposeImportData, ComposeImportError, UserAllData, UserAllError, UserOneData, UserOneError, UserGetData, UserGetError, UserHaveRootAccessData, UserHaveRootAccessError, UserGetBackupsData, UserGetBackupsError, UserGetServerMetricsData, UserGetServerMetricsError, UserUpdateData, UserUpdateError, UserGetUserByTokenData, UserGetUserByTokenError, UserGetMetricsTokenData, UserGetMetricsTokenError, UserRemoveData, UserRemoveError, UserAssignPermissionsData, UserAssignPermissionsError, UserGetInvitationsData, UserGetInvitationsError, UserGetContainerMetricsData, UserGetContainerMetricsError, UserGenerateTokenData, UserGenerateTokenError, UserDeleteApiKeyData, UserDeleteApiKeyError, UserCreateApiKeyData, UserCreateApiKeyError, UserCheckUserOrganizationsData, UserCheckUserOrganizationsError, DomainCreateData, DomainCreateError, DomainByApplicationIdData, DomainByApplicationIdError, DomainByComposeIdData, DomainByComposeIdError, DomainGenerateDomainData, DomainGenerateDomainError, DomainCanGenerateTraefikMeDomainsData, DomainCanGenerateTraefikMeDomainsError, DomainUpdateData, DomainUpdateError, DomainOneData, DomainOneError, DomainDeleteData, DomainDeleteError, DomainValidateDomainData, DomainValidateDomainError, DestinationCreateData, DestinationCreateError, DestinationTestConnectionData, DestinationTestConnectionError, DestinationOneData, DestinationOneError, DestinationAllData, DestinationAllError, DestinationRemoveData, DestinationRemoveError, DestinationUpdateData, DestinationUpdateError, BackupCreateData, BackupCreateError, BackupOneData, BackupOneError, BackupUpdateData, BackupUpdateError, BackupRemoveData, BackupRemoveError, BackupManualBackupPostgresData, BackupManualBackupPostgresError, BackupManualBackupMySqlData, BackupManualBackupMySqlError, BackupManualBackupMariadbData, BackupManualBackupMariadbError, BackupManualBackupComposeData, BackupManualBackupComposeError, BackupManualBackupMongoData, BackupManualBackupMongoError, BackupManualBackupWebServerData, BackupManualBackupWebServerError, BackupListBackupFilesData, BackupListBackupFilesError, DeploymentAllData, DeploymentAllError, DeploymentAllByComposeData, DeploymentAllByComposeError, DeploymentAllByServerData, DeploymentAllByServerError, DeploymentAllByTypeData, DeploymentAllByTypeError, PreviewDeploymentAllData, PreviewDeploymentAllError, PreviewDeploymentDeleteData, PreviewDeploymentDeleteError, PreviewDeploymentOneData, PreviewDeploymentOneError, MountsCreateData, MountsCreateError, MountsRemoveData, MountsRemoveError, MountsOneData, MountsOneError, MountsUpdateData, MountsUpdateError, CertificatesCreateData, CertificatesCreateError, CertificatesOneData, CertificatesOneError, CertificatesRemoveData, CertificatesRemoveError, CertificatesAllData, CertificatesAllError, SettingsReloadServerData, SettingsReloadServerError, SettingsCleanRedisData, SettingsCleanRedisError, SettingsReloadRedisData, SettingsReloadRedisError, SettingsReloadTraefikData, SettingsReloadTraefikError, SettingsToggleDashboardData, SettingsToggleDashboardError, SettingsCleanUnusedImagesData, SettingsCleanUnusedImagesError, SettingsCleanUnusedVolumesData, SettingsCleanUnusedVolumesError, SettingsCleanStoppedContainersData, SettingsCleanStoppedContainersError, SettingsCleanDockerBuilderData, SettingsCleanDockerBuilderError, SettingsCleanDockerPruneData, SettingsCleanDockerPruneError, SettingsCleanAllData, SettingsCleanAllError, SettingsCleanMonitoringData, SettingsCleanMonitoringError, SettingsSaveSshPrivateKeyData, SettingsSaveSshPrivateKeyError, SettingsAssignDomainServerData, SettingsAssignDomainServerError, SettingsCleanSshPrivateKeyData, SettingsCleanSshPrivateKeyError, SettingsUpdateDockerCleanupData, SettingsUpdateDockerCleanupError, SettingsReadTraefikConfigData, SettingsReadTraefikConfigError, SettingsUpdateTraefikConfigData, SettingsUpdateTraefikConfigError, SettingsReadWebServerTraefikConfigData, SettingsReadWebServerTraefikConfigError, SettingsUpdateWebServerTraefikConfigData, SettingsUpdateWebServerTraefikConfigError, SettingsReadMiddlewareTraefikConfigData, SettingsReadMiddlewareTraefikConfigError, SettingsUpdateMiddlewareTraefikConfigData, SettingsUpdateMiddlewareTraefikConfigError, SettingsGetUpdateDataData, SettingsGetUpdateDataError, SettingsUpdateServerData, SettingsUpdateServerError, SettingsGetDokployVersionData, SettingsGetDokployVersionError, SettingsGetReleaseTagData, SettingsGetReleaseTagError, SettingsReadDirectoriesData, SettingsReadDirectoriesError, SettingsUpdateTraefikFileData, SettingsUpdateTraefikFileError, SettingsReadTraefikFileData, SettingsReadTraefikFileError, SettingsGetIpData, SettingsGetIpError, SettingsGetOpenApiDocumentData, SettingsGetOpenApiDocumentError, SettingsReadTraefikEnvData, SettingsReadTraefikEnvError, SettingsWriteTraefikEnvData, SettingsWriteTraefikEnvError, SettingsHaveTraefikDashboardPortEnabledData, SettingsHaveTraefikDashboardPortEnabledError, SettingsHaveActivateRequestsData, SettingsHaveActivateRequestsError, SettingsToggleRequestsData, SettingsToggleRequestsError, SettingsIsCloudData, SettingsIsCloudError, SettingsHealthData, SettingsHealthError, SettingsSetupGpuData, SettingsSetupGpuError, SettingsCheckGpuStatusData, SettingsCheckGpuStatusError, SettingsUpdateTraefikPortsData, SettingsUpdateTraefikPortsError, SettingsGetTraefikPortsData, SettingsGetTraefikPortsError, SettingsUpdateLogCleanupData, SettingsUpdateLogCleanupError, SettingsGetLogCleanupStatusData, SettingsGetLogCleanupStatusError, SecurityCreateData, SecurityCreateError, SecurityOneData, SecurityOneError, SecurityDeleteData, SecurityDeleteError, SecurityUpdateData, SecurityUpdateError, RedirectsCreateData, RedirectsCreateError, RedirectsOneData, RedirectsOneError, RedirectsDeleteData, RedirectsDeleteError, RedirectsUpdateData, RedirectsUpdateError, PortCreateData, PortCreateError, PortOneData, PortOneError, PortDeleteData, PortDeleteError, PortUpdateData, PortUpdateError, RegistryCreateData, RegistryCreateError, RegistryRemoveData, RegistryRemoveError, RegistryUpdateData, RegistryUpdateError, RegistryAllData, RegistryAllError, RegistryOneData, RegistryOneError, RegistryTestRegistryData, RegistryTestRegistryError, ClusterGetNodesData, ClusterGetNodesError, ClusterRemoveWorkerData, ClusterRemoveWorkerError, ClusterAddWorkerData, ClusterAddWorkerError, ClusterAddManagerData, ClusterAddManagerError, NotificationCreateSlackData, NotificationCreateSlackError, NotificationUpdateSlackData, NotificationUpdateSlackError, NotificationTestSlackConnectionData, NotificationTestSlackConnectionError, NotificationCreateTelegramData, NotificationCreateTelegramError, NotificationUpdateTelegramData, NotificationUpdateTelegramError, NotificationTestTelegramConnectionData, NotificationTestTelegramConnectionError, NotificationCreateDiscordData, NotificationCreateDiscordError, NotificationUpdateDiscordData, NotificationUpdateDiscordError, NotificationTestDiscordConnectionData, NotificationTestDiscordConnectionError, NotificationCreateEmailData, NotificationCreateEmailError, NotificationUpdateEmailData, NotificationUpdateEmailError, NotificationTestEmailConnectionData, NotificationTestEmailConnectionError, NotificationRemoveData, NotificationRemoveError, NotificationOneData, NotificationOneError, NotificationAllData, NotificationAllError, NotificationReceiveNotificationData, NotificationReceiveNotificationError, NotificationCreateGotifyData, NotificationCreateGotifyError, NotificationUpdateGotifyData, NotificationUpdateGotifyError, NotificationTestGotifyConnectionData, NotificationTestGotifyConnectionError, SshKeyCreateData, SshKeyCreateError, SshKeyRemoveData, SshKeyRemoveError, SshKeyOneData, SshKeyOneError, SshKeyAllData, SshKeyAllError, SshKeyGenerateData, SshKeyGenerateError, SshKeyUpdateData, SshKeyUpdateError, GitProviderGetAllData, GitProviderGetAllError, GitProviderRemoveData, GitProviderRemoveError, GiteaCreateData, GiteaCreateError, GiteaOneData, GiteaOneError, GiteaGiteaProvidersData, GiteaGiteaProvidersError, GiteaGetGiteaRepositoriesData, GiteaGetGiteaRepositoriesError, GiteaGetGiteaBranchesData, GiteaGetGiteaBranchesError, GiteaTestConnectionData, GiteaTestConnectionError, GiteaUpdateData, GiteaUpdateError, GiteaGetGiteaUrlData, GiteaGetGiteaUrlError, BitbucketCreateData, BitbucketCreateError, BitbucketOneData, BitbucketOneError, BitbucketBitbucketProvidersData, BitbucketBitbucketProvidersError, BitbucketGetBitbucketRepositoriesData, BitbucketGetBitbucketRepositoriesError, BitbucketGetBitbucketBranchesData, BitbucketGetBitbucketBranchesError, BitbucketTestConnectionData, BitbucketTestConnectionError, BitbucketUpdateData, BitbucketUpdateError, GitlabCreateData, GitlabCreateError, GitlabOneData, GitlabOneError, GitlabGitlabProvidersData, GitlabGitlabProvidersError, GitlabGetGitlabRepositoriesData, GitlabGetGitlabRepositoriesError, GitlabGetGitlabBranchesData, GitlabGetGitlabBranchesError, GitlabTestConnectionData, GitlabTestConnectionError, GitlabUpdateData, GitlabUpdateError, GithubOneData, GithubOneError, GithubGetGithubRepositoriesData, GithubGetGithubRepositoriesError, GithubGetGithubBranchesData, GithubGetGithubBranchesError, GithubGithubProvidersData, GithubGithubProvidersError, GithubTestConnectionData, GithubTestConnectionError, GithubUpdateData, GithubUpdateError, ServerCreateData, ServerCreateError, ServerOneData, ServerOneError, ServerGetDefaultCommandData, ServerGetDefaultCommandError, ServerAllData, ServerAllError, ServerCountData, ServerCountError, ServerWithSshKeyData, ServerWithSshKeyError, ServerSetupData, ServerSetupError, ServerValidateData, ServerValidateError, ServerSecurityData, ServerSecurityError, ServerSetupMonitoringData, ServerSetupMonitoringError, ServerRemoveData, ServerRemoveError, ServerUpdateData, ServerUpdateError, ServerPublicIpData, ServerPublicIpError, ServerGetServerMetricsData, ServerGetServerMetricsError, StripeGetProductsData, StripeGetProductsError, StripeCreateCheckoutSessionData, StripeCreateCheckoutSessionError, StripeCreateCustomerPortalSessionData, StripeCreateCustomerPortalSessionError, StripeCanCreateMoreServersData, StripeCanCreateMoreServersError, SwarmGetNodesData, SwarmGetNodesError, SwarmGetNodeInfoData, SwarmGetNodeInfoError, SwarmGetNodeAppsData, SwarmGetNodeAppsError, SwarmGetAppInfosData, SwarmGetAppInfosError, AiOneData, AiOneError, AiGetModelsData, AiGetModelsError, AiCreateData, AiCreateError, AiUpdateData, AiUpdateError, AiGetAllData, AiGetAllError, AiGetData, AiGetError, AiDeleteData, AiDeleteError, AiSuggestData, AiSuggestError, AiDeployData, AiDeployError, OrganizationCreateData, OrganizationCreateError, OrganizationAllData, OrganizationAllError, OrganizationOneData, OrganizationOneError, OrganizationUpdateData, OrganizationUpdateError, OrganizationDeleteData, OrganizationDeleteError, OrganizationAllInvitationsData, OrganizationAllInvitationsError, OrganizationRemoveInvitationData, OrganizationRemoveInvitationError, ScheduleCreateData, ScheduleCreateError, ScheduleUpdateData, ScheduleUpdateError, ScheduleDeleteData, ScheduleDeleteError, ScheduleListData, ScheduleListError, ScheduleOneData, ScheduleOneError, ScheduleRunManuallyData, ScheduleRunManuallyError } from './types.gen';

export const client = createClient(createConfig());

export const adminSetupMonitoring = <ThrowOnError extends boolean = false>(options: Options<AdminSetupMonitoringData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, AdminSetupMonitoringError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/admin.setupMonitoring'
    });
};

export const dockerGetContainers = <ThrowOnError extends boolean = false>(options?: Options<DockerGetContainersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DockerGetContainersError, ThrowOnError>({
        ...options,
        url: '/docker.getContainers'
    });
};

export const dockerRestartContainer = <ThrowOnError extends boolean = false>(options: Options<DockerRestartContainerData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DockerRestartContainerError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/docker.restartContainer'
    });
};

export const dockerGetConfig = <ThrowOnError extends boolean = false>(options: Options<DockerGetConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DockerGetConfigError, ThrowOnError>({
        ...options,
        url: '/docker.getConfig'
    });
};

export const dockerGetContainersByAppNameMatch = <ThrowOnError extends boolean = false>(options: Options<DockerGetContainersByAppNameMatchData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DockerGetContainersByAppNameMatchError, ThrowOnError>({
        ...options,
        url: '/docker.getContainersByAppNameMatch'
    });
};

export const dockerGetContainersByAppLabel = <ThrowOnError extends boolean = false>(options: Options<DockerGetContainersByAppLabelData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DockerGetContainersByAppLabelError, ThrowOnError>({
        ...options,
        url: '/docker.getContainersByAppLabel'
    });
};

export const dockerGetStackContainersByAppName = <ThrowOnError extends boolean = false>(options: Options<DockerGetStackContainersByAppNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DockerGetStackContainersByAppNameError, ThrowOnError>({
        ...options,
        url: '/docker.getStackContainersByAppName'
    });
};

export const dockerGetServiceContainersByAppName = <ThrowOnError extends boolean = false>(options: Options<DockerGetServiceContainersByAppNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DockerGetServiceContainersByAppNameError, ThrowOnError>({
        ...options,
        url: '/docker.getServiceContainersByAppName'
    });
};

export const projectCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ProjectCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/project.create'
    });
};

export const projectOne = <ThrowOnError extends boolean = false>(options: Options<ProjectOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ProjectOneError, ThrowOnError>({
        ...options,
        url: '/project.one'
    });
};

export const projectAll = <ThrowOnError extends boolean = false>(options?: Options<ProjectAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ProjectAllError, ThrowOnError>({
        ...options,
        url: '/project.all'
    });
};

export const projectRemove = <ThrowOnError extends boolean = false>(options: Options<ProjectRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ProjectRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/project.remove'
    });
};

export const projectUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ProjectUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/project.update'
    });
};

export const projectDuplicate = <ThrowOnError extends boolean = false>(options: Options<ProjectDuplicateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ProjectDuplicateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/project.duplicate'
    });
};

export const applicationCreate = <ThrowOnError extends boolean = false>(options: Options<ApplicationCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.create'
    });
};

export const applicationOne = <ThrowOnError extends boolean = false>(options: Options<ApplicationOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ApplicationOneError, ThrowOnError>({
        ...options,
        url: '/application.one'
    });
};

export const applicationReload = <ThrowOnError extends boolean = false>(options: Options<ApplicationReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationReloadError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.reload'
    });
};

export const applicationDelete = <ThrowOnError extends boolean = false>(options: Options<ApplicationDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.delete'
    });
};

export const applicationStop = <ThrowOnError extends boolean = false>(options: Options<ApplicationStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.stop'
    });
};

export const applicationStart = <ThrowOnError extends boolean = false>(options: Options<ApplicationStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.start'
    });
};

export const applicationRedeploy = <ThrowOnError extends boolean = false>(options: Options<ApplicationRedeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationRedeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.redeploy'
    });
};

export const applicationSaveEnvironment = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveEnvironmentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveEnvironment'
    });
};

export const applicationSaveBuildType = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveBuildTypeData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveBuildTypeError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveBuildType'
    });
};

export const applicationSaveGithubProvider = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveGithubProviderData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveGithubProviderError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveGithubProvider'
    });
};

export const applicationSaveGitlabProvider = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveGitlabProviderData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveGitlabProviderError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveGitlabProvider'
    });
};

export const applicationSaveBitbucketProvider = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveBitbucketProviderData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveBitbucketProviderError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveBitbucketProvider'
    });
};

export const applicationSaveGiteaProvider = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveGiteaProviderData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveGiteaProviderError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveGiteaProvider'
    });
};

export const applicationSaveDockerProvider = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveDockerProviderData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveDockerProviderError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveDockerProvider'
    });
};

export const applicationSaveGitProdiver = <ThrowOnError extends boolean = false>(options: Options<ApplicationSaveGitProdiverData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationSaveGitProdiverError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.saveGitProdiver'
    });
};

export const applicationMarkRunning = <ThrowOnError extends boolean = false>(options: Options<ApplicationMarkRunningData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationMarkRunningError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.markRunning'
    });
};

export const applicationUpdate = <ThrowOnError extends boolean = false>(options: Options<ApplicationUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.update'
    });
};

export const applicationRefreshToken = <ThrowOnError extends boolean = false>(options: Options<ApplicationRefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationRefreshTokenError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.refreshToken'
    });
};

export const applicationDeploy = <ThrowOnError extends boolean = false>(options: Options<ApplicationDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.deploy'
    });
};

export const applicationCleanQueues = <ThrowOnError extends boolean = false>(options: Options<ApplicationCleanQueuesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationCleanQueuesError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.cleanQueues'
    });
};

export const applicationReadTraefikConfig = <ThrowOnError extends boolean = false>(options: Options<ApplicationReadTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ApplicationReadTraefikConfigError, ThrowOnError>({
        ...options,
        url: '/application.readTraefikConfig'
    });
};

export const applicationUpdateTraefikConfig = <ThrowOnError extends boolean = false>(options: Options<ApplicationUpdateTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationUpdateTraefikConfigError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.updateTraefikConfig'
    });
};

export const applicationReadAppMonitoring = <ThrowOnError extends boolean = false>(options: Options<ApplicationReadAppMonitoringData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ApplicationReadAppMonitoringError, ThrowOnError>({
        ...options,
        url: '/application.readAppMonitoring'
    });
};

export const applicationMove = <ThrowOnError extends boolean = false>(options: Options<ApplicationMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ApplicationMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/application.move'
    });
};

export const mysqlCreate = <ThrowOnError extends boolean = false>(options: Options<MysqlCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.create'
    });
};

export const mysqlOne = <ThrowOnError extends boolean = false>(options: Options<MysqlOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, MysqlOneError, ThrowOnError>({
        ...options,
        url: '/mysql.one'
    });
};

export const mysqlStart = <ThrowOnError extends boolean = false>(options: Options<MysqlStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.start'
    });
};

export const mysqlStop = <ThrowOnError extends boolean = false>(options: Options<MysqlStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.stop'
    });
};

export const mysqlSaveExternalPort = <ThrowOnError extends boolean = false>(options: Options<MysqlSaveExternalPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlSaveExternalPortError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.saveExternalPort'
    });
};

export const mysqlDeploy = <ThrowOnError extends boolean = false>(options: Options<MysqlDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.deploy'
    });
};

export const mysqlChangeStatus = <ThrowOnError extends boolean = false>(options: Options<MysqlChangeStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlChangeStatusError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.changeStatus'
    });
};

export const mysqlReload = <ThrowOnError extends boolean = false>(options: Options<MysqlReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlReloadError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.reload'
    });
};

export const mysqlRemove = <ThrowOnError extends boolean = false>(options: Options<MysqlRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.remove'
    });
};

export const mysqlSaveEnvironment = <ThrowOnError extends boolean = false>(options: Options<MysqlSaveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlSaveEnvironmentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.saveEnvironment'
    });
};

export const mysqlUpdate = <ThrowOnError extends boolean = false>(options: Options<MysqlUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.update'
    });
};

export const mysqlMove = <ThrowOnError extends boolean = false>(options: Options<MysqlMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.move'
    });
};

export const mysqlRebuild = <ThrowOnError extends boolean = false>(options: Options<MysqlRebuildData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MysqlRebuildError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mysql.rebuild'
    });
};

export const postgresCreate = <ThrowOnError extends boolean = false>(options: Options<PostgresCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.create'
    });
};

export const postgresOne = <ThrowOnError extends boolean = false>(options: Options<PostgresOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, PostgresOneError, ThrowOnError>({
        ...options,
        url: '/postgres.one'
    });
};

export const postgresStart = <ThrowOnError extends boolean = false>(options: Options<PostgresStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.start'
    });
};

export const postgresStop = <ThrowOnError extends boolean = false>(options: Options<PostgresStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.stop'
    });
};

export const postgresSaveExternalPort = <ThrowOnError extends boolean = false>(options: Options<PostgresSaveExternalPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresSaveExternalPortError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.saveExternalPort'
    });
};

export const postgresDeploy = <ThrowOnError extends boolean = false>(options: Options<PostgresDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.deploy'
    });
};

export const postgresChangeStatus = <ThrowOnError extends boolean = false>(options: Options<PostgresChangeStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresChangeStatusError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.changeStatus'
    });
};

export const postgresRemove = <ThrowOnError extends boolean = false>(options: Options<PostgresRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.remove'
    });
};

export const postgresSaveEnvironment = <ThrowOnError extends boolean = false>(options: Options<PostgresSaveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresSaveEnvironmentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.saveEnvironment'
    });
};

export const postgresReload = <ThrowOnError extends boolean = false>(options: Options<PostgresReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresReloadError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.reload'
    });
};

export const postgresUpdate = <ThrowOnError extends boolean = false>(options: Options<PostgresUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.update'
    });
};

export const postgresMove = <ThrowOnError extends boolean = false>(options: Options<PostgresMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.move'
    });
};

export const postgresRebuild = <ThrowOnError extends boolean = false>(options: Options<PostgresRebuildData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostgresRebuildError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/postgres.rebuild'
    });
};

export const redisCreate = <ThrowOnError extends boolean = false>(options: Options<RedisCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.create'
    });
};

export const redisOne = <ThrowOnError extends boolean = false>(options: Options<RedisOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, RedisOneError, ThrowOnError>({
        ...options,
        url: '/redis.one'
    });
};

export const redisStart = <ThrowOnError extends boolean = false>(options: Options<RedisStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.start'
    });
};

export const redisReload = <ThrowOnError extends boolean = false>(options: Options<RedisReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisReloadError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.reload'
    });
};

export const redisStop = <ThrowOnError extends boolean = false>(options: Options<RedisStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.stop'
    });
};

export const redisSaveExternalPort = <ThrowOnError extends boolean = false>(options: Options<RedisSaveExternalPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisSaveExternalPortError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.saveExternalPort'
    });
};

export const redisDeploy = <ThrowOnError extends boolean = false>(options: Options<RedisDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.deploy'
    });
};

export const redisChangeStatus = <ThrowOnError extends boolean = false>(options: Options<RedisChangeStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisChangeStatusError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.changeStatus'
    });
};

export const redisRemove = <ThrowOnError extends boolean = false>(options: Options<RedisRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.remove'
    });
};

export const redisSaveEnvironment = <ThrowOnError extends boolean = false>(options: Options<RedisSaveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisSaveEnvironmentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.saveEnvironment'
    });
};

export const redisUpdate = <ThrowOnError extends boolean = false>(options: Options<RedisUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.update'
    });
};

export const redisMove = <ThrowOnError extends boolean = false>(options: Options<RedisMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.move'
    });
};

export const redisRebuild = <ThrowOnError extends boolean = false>(options: Options<RedisRebuildData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedisRebuildError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redis.rebuild'
    });
};

export const mongoCreate = <ThrowOnError extends boolean = false>(options: Options<MongoCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.create'
    });
};

export const mongoOne = <ThrowOnError extends boolean = false>(options: Options<MongoOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, MongoOneError, ThrowOnError>({
        ...options,
        url: '/mongo.one'
    });
};

export const mongoStart = <ThrowOnError extends boolean = false>(options: Options<MongoStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.start'
    });
};

export const mongoStop = <ThrowOnError extends boolean = false>(options: Options<MongoStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.stop'
    });
};

export const mongoSaveExternalPort = <ThrowOnError extends boolean = false>(options: Options<MongoSaveExternalPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoSaveExternalPortError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.saveExternalPort'
    });
};

export const mongoDeploy = <ThrowOnError extends boolean = false>(options: Options<MongoDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.deploy'
    });
};

export const mongoChangeStatus = <ThrowOnError extends boolean = false>(options: Options<MongoChangeStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoChangeStatusError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.changeStatus'
    });
};

export const mongoReload = <ThrowOnError extends boolean = false>(options: Options<MongoReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoReloadError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.reload'
    });
};

export const mongoRemove = <ThrowOnError extends boolean = false>(options: Options<MongoRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.remove'
    });
};

export const mongoSaveEnvironment = <ThrowOnError extends boolean = false>(options: Options<MongoSaveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoSaveEnvironmentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.saveEnvironment'
    });
};

export const mongoUpdate = <ThrowOnError extends boolean = false>(options: Options<MongoUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.update'
    });
};

export const mongoMove = <ThrowOnError extends boolean = false>(options: Options<MongoMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.move'
    });
};

export const mongoRebuild = <ThrowOnError extends boolean = false>(options: Options<MongoRebuildData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MongoRebuildError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mongo.rebuild'
    });
};

export const mariadbCreate = <ThrowOnError extends boolean = false>(options: Options<MariadbCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.create'
    });
};

export const mariadbOne = <ThrowOnError extends boolean = false>(options: Options<MariadbOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, MariadbOneError, ThrowOnError>({
        ...options,
        url: '/mariadb.one'
    });
};

export const mariadbStart = <ThrowOnError extends boolean = false>(options: Options<MariadbStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.start'
    });
};

export const mariadbStop = <ThrowOnError extends boolean = false>(options: Options<MariadbStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.stop'
    });
};

export const mariadbSaveExternalPort = <ThrowOnError extends boolean = false>(options: Options<MariadbSaveExternalPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbSaveExternalPortError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.saveExternalPort'
    });
};

export const mariadbDeploy = <ThrowOnError extends boolean = false>(options: Options<MariadbDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.deploy'
    });
};

export const mariadbChangeStatus = <ThrowOnError extends boolean = false>(options: Options<MariadbChangeStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbChangeStatusError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.changeStatus'
    });
};

export const mariadbRemove = <ThrowOnError extends boolean = false>(options: Options<MariadbRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.remove'
    });
};

export const mariadbSaveEnvironment = <ThrowOnError extends boolean = false>(options: Options<MariadbSaveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbSaveEnvironmentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.saveEnvironment'
    });
};

export const mariadbReload = <ThrowOnError extends boolean = false>(options: Options<MariadbReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbReloadError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.reload'
    });
};

export const mariadbUpdate = <ThrowOnError extends boolean = false>(options: Options<MariadbUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.update'
    });
};

export const mariadbMove = <ThrowOnError extends boolean = false>(options: Options<MariadbMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.move'
    });
};

export const mariadbRebuild = <ThrowOnError extends boolean = false>(options: Options<MariadbRebuildData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MariadbRebuildError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mariadb.rebuild'
    });
};

export const composeCreate = <ThrowOnError extends boolean = false>(options: Options<ComposeCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.create'
    });
};

export const composeOne = <ThrowOnError extends boolean = false>(options: Options<ComposeOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ComposeOneError, ThrowOnError>({
        ...options,
        url: '/compose.one'
    });
};

export const composeUpdate = <ThrowOnError extends boolean = false>(options: Options<ComposeUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.update'
    });
};

export const composeDelete = <ThrowOnError extends boolean = false>(options: Options<ComposeDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.delete'
    });
};

export const composeCleanQueues = <ThrowOnError extends boolean = false>(options: Options<ComposeCleanQueuesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeCleanQueuesError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.cleanQueues'
    });
};

export const composeLoadServices = <ThrowOnError extends boolean = false>(options: Options<ComposeLoadServicesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ComposeLoadServicesError, ThrowOnError>({
        ...options,
        url: '/compose.loadServices'
    });
};

export const composeFetchSourceType = <ThrowOnError extends boolean = false>(options: Options<ComposeFetchSourceTypeData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeFetchSourceTypeError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.fetchSourceType'
    });
};

export const composeRandomizeCompose = <ThrowOnError extends boolean = false>(options: Options<ComposeRandomizeComposeData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeRandomizeComposeError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.randomizeCompose'
    });
};

export const composeIsolatedDeployment = <ThrowOnError extends boolean = false>(options: Options<ComposeIsolatedDeploymentData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeIsolatedDeploymentError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.isolatedDeployment'
    });
};

export const composeGetConvertedCompose = <ThrowOnError extends boolean = false>(options: Options<ComposeGetConvertedComposeData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ComposeGetConvertedComposeError, ThrowOnError>({
        ...options,
        url: '/compose.getConvertedCompose'
    });
};

export const composeDeploy = <ThrowOnError extends boolean = false>(options: Options<ComposeDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.deploy'
    });
};

export const composeRedeploy = <ThrowOnError extends boolean = false>(options: Options<ComposeRedeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeRedeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.redeploy'
    });
};

export const composeStop = <ThrowOnError extends boolean = false>(options: Options<ComposeStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeStopError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.stop'
    });
};

export const composeStart = <ThrowOnError extends boolean = false>(options: Options<ComposeStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeStartError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.start'
    });
};

export const composeGetDefaultCommand = <ThrowOnError extends boolean = false>(options: Options<ComposeGetDefaultCommandData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ComposeGetDefaultCommandError, ThrowOnError>({
        ...options,
        url: '/compose.getDefaultCommand'
    });
};

export const composeRefreshToken = <ThrowOnError extends boolean = false>(options: Options<ComposeRefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeRefreshTokenError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.refreshToken'
    });
};

export const composeDeployTemplate = <ThrowOnError extends boolean = false>(options: Options<ComposeDeployTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeDeployTemplateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.deployTemplate'
    });
};

export const composeTemplates = <ThrowOnError extends boolean = false>(options?: Options<ComposeTemplatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ComposeTemplatesError, ThrowOnError>({
        ...options,
        url: '/compose.templates'
    });
};

export const composeGetTags = <ThrowOnError extends boolean = false>(options?: Options<ComposeGetTagsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ComposeGetTagsError, ThrowOnError>({
        ...options,
        url: '/compose.getTags'
    });
};

export const composeMove = <ThrowOnError extends boolean = false>(options: Options<ComposeMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeMoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.move'
    });
};

export const composeProcessTemplate = <ThrowOnError extends boolean = false>(options: Options<ComposeProcessTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeProcessTemplateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.processTemplate'
    });
};

export const composeImport = <ThrowOnError extends boolean = false>(options: Options<ComposeImportData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ComposeImportError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/compose.import'
    });
};

export const userAll = <ThrowOnError extends boolean = false>(options?: Options<UserAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserAllError, ThrowOnError>({
        ...options,
        url: '/user.all'
    });
};

export const userOne = <ThrowOnError extends boolean = false>(options: Options<UserOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserOneError, ThrowOnError>({
        ...options,
        url: '/user.one'
    });
};

export const userGet = <ThrowOnError extends boolean = false>(options?: Options<UserGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetError, ThrowOnError>({
        ...options,
        url: '/user.get'
    });
};

export const userHaveRootAccess = <ThrowOnError extends boolean = false>(options?: Options<UserHaveRootAccessData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserHaveRootAccessError, ThrowOnError>({
        ...options,
        url: '/user.haveRootAccess'
    });
};

export const userGetBackups = <ThrowOnError extends boolean = false>(options?: Options<UserGetBackupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetBackupsError, ThrowOnError>({
        ...options,
        url: '/user.getBackups'
    });
};

export const userGetServerMetrics = <ThrowOnError extends boolean = false>(options?: Options<UserGetServerMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetServerMetricsError, ThrowOnError>({
        ...options,
        url: '/user.getServerMetrics'
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UserUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/user.update'
    });
};

export const userGetUserByToken = <ThrowOnError extends boolean = false>(options: Options<UserGetUserByTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetUserByTokenError, ThrowOnError>({
        ...options,
        url: '/user.getUserByToken'
    });
};

export const userGetMetricsToken = <ThrowOnError extends boolean = false>(options?: Options<UserGetMetricsTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetMetricsTokenError, ThrowOnError>({
        ...options,
        url: '/user.getMetricsToken'
    });
};

export const userRemove = <ThrowOnError extends boolean = false>(options: Options<UserRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UserRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/user.remove'
    });
};

export const userAssignPermissions = <ThrowOnError extends boolean = false>(options: Options<UserAssignPermissionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UserAssignPermissionsError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/user.assignPermissions'
    });
};

export const userGetInvitations = <ThrowOnError extends boolean = false>(options?: Options<UserGetInvitationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetInvitationsError, ThrowOnError>({
        ...options,
        url: '/user.getInvitations'
    });
};

export const userGetContainerMetrics = <ThrowOnError extends boolean = false>(options: Options<UserGetContainerMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserGetContainerMetricsError, ThrowOnError>({
        ...options,
        url: '/user.getContainerMetrics'
    });
};

export const userGenerateToken = <ThrowOnError extends boolean = false>(options?: Options<UserGenerateTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UserGenerateTokenError, ThrowOnError>({
        ...options,
        url: '/user.generateToken'
    });
};

export const userDeleteApiKey = <ThrowOnError extends boolean = false>(options: Options<UserDeleteApiKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UserDeleteApiKeyError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/user.deleteApiKey'
    });
};

export const userCreateApiKey = <ThrowOnError extends boolean = false>(options: Options<UserCreateApiKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UserCreateApiKeyError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/user.createApiKey'
    });
};

export const userCheckUserOrganizations = <ThrowOnError extends boolean = false>(options: Options<UserCheckUserOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UserCheckUserOrganizationsError, ThrowOnError>({
        ...options,
        url: '/user.checkUserOrganizations'
    });
};

export const domainCreate = <ThrowOnError extends boolean = false>(options: Options<DomainCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DomainCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domain.create'
    });
};

export const domainByApplicationId = <ThrowOnError extends boolean = false>(options: Options<DomainByApplicationIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DomainByApplicationIdError, ThrowOnError>({
        ...options,
        url: '/domain.byApplicationId'
    });
};

export const domainByComposeId = <ThrowOnError extends boolean = false>(options: Options<DomainByComposeIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DomainByComposeIdError, ThrowOnError>({
        ...options,
        url: '/domain.byComposeId'
    });
};

export const domainGenerateDomain = <ThrowOnError extends boolean = false>(options: Options<DomainGenerateDomainData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DomainGenerateDomainError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domain.generateDomain'
    });
};

export const domainCanGenerateTraefikMeDomains = <ThrowOnError extends boolean = false>(options: Options<DomainCanGenerateTraefikMeDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DomainCanGenerateTraefikMeDomainsError, ThrowOnError>({
        ...options,
        url: '/domain.canGenerateTraefikMeDomains'
    });
};

export const domainUpdate = <ThrowOnError extends boolean = false>(options: Options<DomainUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DomainUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domain.update'
    });
};

export const domainOne = <ThrowOnError extends boolean = false>(options: Options<DomainOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DomainOneError, ThrowOnError>({
        ...options,
        url: '/domain.one'
    });
};

export const domainDelete = <ThrowOnError extends boolean = false>(options: Options<DomainDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DomainDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domain.delete'
    });
};

export const domainValidateDomain = <ThrowOnError extends boolean = false>(options: Options<DomainValidateDomainData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DomainValidateDomainError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domain.validateDomain'
    });
};

export const destinationCreate = <ThrowOnError extends boolean = false>(options: Options<DestinationCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DestinationCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/destination.create'
    });
};

export const destinationTestConnection = <ThrowOnError extends boolean = false>(options: Options<DestinationTestConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DestinationTestConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/destination.testConnection'
    });
};

export const destinationOne = <ThrowOnError extends boolean = false>(options: Options<DestinationOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DestinationOneError, ThrowOnError>({
        ...options,
        url: '/destination.one'
    });
};

export const destinationAll = <ThrowOnError extends boolean = false>(options?: Options<DestinationAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DestinationAllError, ThrowOnError>({
        ...options,
        url: '/destination.all'
    });
};

export const destinationRemove = <ThrowOnError extends boolean = false>(options: Options<DestinationRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DestinationRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/destination.remove'
    });
};

export const destinationUpdate = <ThrowOnError extends boolean = false>(options: Options<DestinationUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, DestinationUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/destination.update'
    });
};

export const backupCreate = <ThrowOnError extends boolean = false>(options: Options<BackupCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.create'
    });
};

export const backupOne = <ThrowOnError extends boolean = false>(options: Options<BackupOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, BackupOneError, ThrowOnError>({
        ...options,
        url: '/backup.one'
    });
};

export const backupUpdate = <ThrowOnError extends boolean = false>(options: Options<BackupUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.update'
    });
};

export const backupRemove = <ThrowOnError extends boolean = false>(options: Options<BackupRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.remove'
    });
};

export const backupManualBackupPostgres = <ThrowOnError extends boolean = false>(options: Options<BackupManualBackupPostgresData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupManualBackupPostgresError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.manualBackupPostgres'
    });
};

export const backupManualBackupMySql = <ThrowOnError extends boolean = false>(options: Options<BackupManualBackupMySqlData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupManualBackupMySqlError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.manualBackupMySql'
    });
};

export const backupManualBackupMariadb = <ThrowOnError extends boolean = false>(options: Options<BackupManualBackupMariadbData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupManualBackupMariadbError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.manualBackupMariadb'
    });
};

export const backupManualBackupCompose = <ThrowOnError extends boolean = false>(options: Options<BackupManualBackupComposeData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupManualBackupComposeError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.manualBackupCompose'
    });
};

export const backupManualBackupMongo = <ThrowOnError extends boolean = false>(options: Options<BackupManualBackupMongoData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupManualBackupMongoError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.manualBackupMongo'
    });
};

export const backupManualBackupWebServer = <ThrowOnError extends boolean = false>(options: Options<BackupManualBackupWebServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BackupManualBackupWebServerError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/backup.manualBackupWebServer'
    });
};

export const backupListBackupFiles = <ThrowOnError extends boolean = false>(options: Options<BackupListBackupFilesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, BackupListBackupFilesError, ThrowOnError>({
        ...options,
        url: '/backup.listBackupFiles'
    });
};

export const deploymentAll = <ThrowOnError extends boolean = false>(options: Options<DeploymentAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DeploymentAllError, ThrowOnError>({
        ...options,
        url: '/deployment.all'
    });
};

export const deploymentAllByCompose = <ThrowOnError extends boolean = false>(options: Options<DeploymentAllByComposeData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DeploymentAllByComposeError, ThrowOnError>({
        ...options,
        url: '/deployment.allByCompose'
    });
};

export const deploymentAllByServer = <ThrowOnError extends boolean = false>(options: Options<DeploymentAllByServerData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DeploymentAllByServerError, ThrowOnError>({
        ...options,
        url: '/deployment.allByServer'
    });
};

export const deploymentAllByType = <ThrowOnError extends boolean = false>(options: Options<DeploymentAllByTypeData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DeploymentAllByTypeError, ThrowOnError>({
        ...options,
        url: '/deployment.allByType'
    });
};

export const previewDeploymentAll = <ThrowOnError extends boolean = false>(options: Options<PreviewDeploymentAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, PreviewDeploymentAllError, ThrowOnError>({
        ...options,
        url: '/previewDeployment.all'
    });
};

export const previewDeploymentDelete = <ThrowOnError extends boolean = false>(options: Options<PreviewDeploymentDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PreviewDeploymentDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/previewDeployment.delete'
    });
};

export const previewDeploymentOne = <ThrowOnError extends boolean = false>(options: Options<PreviewDeploymentOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, PreviewDeploymentOneError, ThrowOnError>({
        ...options,
        url: '/previewDeployment.one'
    });
};

export const mountsCreate = <ThrowOnError extends boolean = false>(options: Options<MountsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MountsCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mounts.create'
    });
};

export const mountsRemove = <ThrowOnError extends boolean = false>(options: Options<MountsRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MountsRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mounts.remove'
    });
};

export const mountsOne = <ThrowOnError extends boolean = false>(options: Options<MountsOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, MountsOneError, ThrowOnError>({
        ...options,
        url: '/mounts.one'
    });
};

export const mountsUpdate = <ThrowOnError extends boolean = false>(options: Options<MountsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, MountsUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/mounts.update'
    });
};

export const certificatesCreate = <ThrowOnError extends boolean = false>(options: Options<CertificatesCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, CertificatesCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/certificates.create'
    });
};

export const certificatesOne = <ThrowOnError extends boolean = false>(options: Options<CertificatesOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, CertificatesOneError, ThrowOnError>({
        ...options,
        url: '/certificates.one'
    });
};

export const certificatesRemove = <ThrowOnError extends boolean = false>(options: Options<CertificatesRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, CertificatesRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/certificates.remove'
    });
};

export const certificatesAll = <ThrowOnError extends boolean = false>(options?: Options<CertificatesAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, CertificatesAllError, ThrowOnError>({
        ...options,
        url: '/certificates.all'
    });
};

export const settingsReloadServer = <ThrowOnError extends boolean = false>(options?: Options<SettingsReloadServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsReloadServerError, ThrowOnError>({
        ...options,
        url: '/settings.reloadServer'
    });
};

export const settingsCleanRedis = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanRedisData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanRedisError, ThrowOnError>({
        ...options,
        url: '/settings.cleanRedis'
    });
};

export const settingsReloadRedis = <ThrowOnError extends boolean = false>(options?: Options<SettingsReloadRedisData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsReloadRedisError, ThrowOnError>({
        ...options,
        url: '/settings.reloadRedis'
    });
};

export const settingsReloadTraefik = <ThrowOnError extends boolean = false>(options?: Options<SettingsReloadTraefikData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsReloadTraefikError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.reloadTraefik'
    });
};

export const settingsToggleDashboard = <ThrowOnError extends boolean = false>(options: Options<SettingsToggleDashboardData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsToggleDashboardError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.toggleDashboard'
    });
};

export const settingsCleanUnusedImages = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanUnusedImagesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanUnusedImagesError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.cleanUnusedImages'
    });
};

export const settingsCleanUnusedVolumes = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanUnusedVolumesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanUnusedVolumesError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.cleanUnusedVolumes'
    });
};

export const settingsCleanStoppedContainers = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanStoppedContainersData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanStoppedContainersError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.cleanStoppedContainers'
    });
};

export const settingsCleanDockerBuilder = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanDockerBuilderData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanDockerBuilderError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.cleanDockerBuilder'
    });
};

export const settingsCleanDockerPrune = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanDockerPruneData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanDockerPruneError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.cleanDockerPrune'
    });
};

export const settingsCleanAll = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanAllData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanAllError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.cleanAll'
    });
};

export const settingsCleanMonitoring = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanMonitoringData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanMonitoringError, ThrowOnError>({
        ...options,
        url: '/settings.cleanMonitoring'
    });
};

export const settingsSaveSshPrivateKey = <ThrowOnError extends boolean = false>(options: Options<SettingsSaveSshPrivateKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsSaveSshPrivateKeyError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.saveSSHPrivateKey'
    });
};

export const settingsAssignDomainServer = <ThrowOnError extends boolean = false>(options: Options<SettingsAssignDomainServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsAssignDomainServerError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.assignDomainServer'
    });
};

export const settingsCleanSshPrivateKey = <ThrowOnError extends boolean = false>(options?: Options<SettingsCleanSshPrivateKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsCleanSshPrivateKeyError, ThrowOnError>({
        ...options,
        url: '/settings.cleanSSHPrivateKey'
    });
};

export const settingsUpdateDockerCleanup = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateDockerCleanupData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateDockerCleanupError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateDockerCleanup'
    });
};

export const settingsReadTraefikConfig = <ThrowOnError extends boolean = false>(options?: Options<SettingsReadTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsReadTraefikConfigError, ThrowOnError>({
        ...options,
        url: '/settings.readTraefikConfig'
    });
};

export const settingsUpdateTraefikConfig = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateTraefikConfigError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateTraefikConfig'
    });
};

export const settingsReadWebServerTraefikConfig = <ThrowOnError extends boolean = false>(options?: Options<SettingsReadWebServerTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsReadWebServerTraefikConfigError, ThrowOnError>({
        ...options,
        url: '/settings.readWebServerTraefikConfig'
    });
};

export const settingsUpdateWebServerTraefikConfig = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateWebServerTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateWebServerTraefikConfigError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateWebServerTraefikConfig'
    });
};

export const settingsReadMiddlewareTraefikConfig = <ThrowOnError extends boolean = false>(options?: Options<SettingsReadMiddlewareTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsReadMiddlewareTraefikConfigError, ThrowOnError>({
        ...options,
        url: '/settings.readMiddlewareTraefikConfig'
    });
};

export const settingsUpdateMiddlewareTraefikConfig = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateMiddlewareTraefikConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateMiddlewareTraefikConfigError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateMiddlewareTraefikConfig'
    });
};

export const settingsGetUpdateData = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetUpdateDataData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsGetUpdateDataError, ThrowOnError>({
        ...options,
        url: '/settings.getUpdateData'
    });
};

export const settingsUpdateServer = <ThrowOnError extends boolean = false>(options?: Options<SettingsUpdateServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateServerError, ThrowOnError>({
        ...options,
        url: '/settings.updateServer'
    });
};

export const settingsGetDokployVersion = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetDokployVersionData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsGetDokployVersionError, ThrowOnError>({
        ...options,
        url: '/settings.getDokployVersion'
    });
};

export const settingsGetReleaseTag = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetReleaseTagData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsGetReleaseTagError, ThrowOnError>({
        ...options,
        url: '/settings.getReleaseTag'
    });
};

export const settingsReadDirectories = <ThrowOnError extends boolean = false>(options?: Options<SettingsReadDirectoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsReadDirectoriesError, ThrowOnError>({
        ...options,
        url: '/settings.readDirectories'
    });
};

export const settingsUpdateTraefikFile = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateTraefikFileData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateTraefikFileError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateTraefikFile'
    });
};

export const settingsReadTraefikFile = <ThrowOnError extends boolean = false>(options: Options<SettingsReadTraefikFileData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsReadTraefikFileError, ThrowOnError>({
        ...options,
        url: '/settings.readTraefikFile'
    });
};

export const settingsGetIp = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetIpData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsGetIpError, ThrowOnError>({
        ...options,
        url: '/settings.getIp'
    });
};

export const settingsGetOpenApiDocument = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetOpenApiDocumentData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsGetOpenApiDocumentError, ThrowOnError>({
        ...options,
        url: '/settings.getOpenApiDocument'
    });
};

export const settingsReadTraefikEnv = <ThrowOnError extends boolean = false>(options?: Options<SettingsReadTraefikEnvData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsReadTraefikEnvError, ThrowOnError>({
        ...options,
        url: '/settings.readTraefikEnv'
    });
};

export const settingsWriteTraefikEnv = <ThrowOnError extends boolean = false>(options: Options<SettingsWriteTraefikEnvData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsWriteTraefikEnvError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.writeTraefikEnv'
    });
};

export const settingsHaveTraefikDashboardPortEnabled = <ThrowOnError extends boolean = false>(options?: Options<SettingsHaveTraefikDashboardPortEnabledData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsHaveTraefikDashboardPortEnabledError, ThrowOnError>({
        ...options,
        url: '/settings.haveTraefikDashboardPortEnabled'
    });
};

export const settingsHaveActivateRequests = <ThrowOnError extends boolean = false>(options?: Options<SettingsHaveActivateRequestsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsHaveActivateRequestsError, ThrowOnError>({
        ...options,
        url: '/settings.haveActivateRequests'
    });
};

export const settingsToggleRequests = <ThrowOnError extends boolean = false>(options: Options<SettingsToggleRequestsData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsToggleRequestsError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.toggleRequests'
    });
};

export const settingsIsCloud = <ThrowOnError extends boolean = false>(options?: Options<SettingsIsCloudData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsIsCloudError, ThrowOnError>({
        ...options,
        url: '/settings.isCloud'
    });
};

export const settingsHealth = <ThrowOnError extends boolean = false>(options?: Options<SettingsHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsHealthError, ThrowOnError>({
        ...options,
        url: '/settings.health'
    });
};

export const settingsSetupGpu = <ThrowOnError extends boolean = false>(options: Options<SettingsSetupGpuData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsSetupGpuError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.setupGPU'
    });
};

export const settingsCheckGpuStatus = <ThrowOnError extends boolean = false>(options?: Options<SettingsCheckGpuStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsCheckGpuStatusError, ThrowOnError>({
        ...options,
        url: '/settings.checkGPUStatus'
    });
};

export const settingsUpdateTraefikPorts = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateTraefikPortsData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateTraefikPortsError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateTraefikPorts'
    });
};

export const settingsGetTraefikPorts = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetTraefikPortsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsGetTraefikPortsError, ThrowOnError>({
        ...options,
        url: '/settings.getTraefikPorts'
    });
};

export const settingsUpdateLogCleanup = <ThrowOnError extends boolean = false>(options: Options<SettingsUpdateLogCleanupData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SettingsUpdateLogCleanupError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/settings.updateLogCleanup'
    });
};

export const settingsGetLogCleanupStatus = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetLogCleanupStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SettingsGetLogCleanupStatusError, ThrowOnError>({
        ...options,
        url: '/settings.getLogCleanupStatus'
    });
};

export const securityCreate = <ThrowOnError extends boolean = false>(options: Options<SecurityCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SecurityCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/security.create'
    });
};

export const securityOne = <ThrowOnError extends boolean = false>(options: Options<SecurityOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SecurityOneError, ThrowOnError>({
        ...options,
        url: '/security.one'
    });
};

export const securityDelete = <ThrowOnError extends boolean = false>(options: Options<SecurityDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SecurityDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/security.delete'
    });
};

export const securityUpdate = <ThrowOnError extends boolean = false>(options: Options<SecurityUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SecurityUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/security.update'
    });
};

export const redirectsCreate = <ThrowOnError extends boolean = false>(options: Options<RedirectsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedirectsCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redirects.create'
    });
};

export const redirectsOne = <ThrowOnError extends boolean = false>(options: Options<RedirectsOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, RedirectsOneError, ThrowOnError>({
        ...options,
        url: '/redirects.one'
    });
};

export const redirectsDelete = <ThrowOnError extends boolean = false>(options: Options<RedirectsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedirectsDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redirects.delete'
    });
};

export const redirectsUpdate = <ThrowOnError extends boolean = false>(options: Options<RedirectsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RedirectsUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/redirects.update'
    });
};

export const portCreate = <ThrowOnError extends boolean = false>(options: Options<PortCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PortCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/port.create'
    });
};

export const portOne = <ThrowOnError extends boolean = false>(options: Options<PortOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, PortOneError, ThrowOnError>({
        ...options,
        url: '/port.one'
    });
};

export const portDelete = <ThrowOnError extends boolean = false>(options: Options<PortDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PortDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/port.delete'
    });
};

export const portUpdate = <ThrowOnError extends boolean = false>(options: Options<PortUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PortUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/port.update'
    });
};

export const registryCreate = <ThrowOnError extends boolean = false>(options: Options<RegistryCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RegistryCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/registry.create'
    });
};

export const registryRemove = <ThrowOnError extends boolean = false>(options: Options<RegistryRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RegistryRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/registry.remove'
    });
};

export const registryUpdate = <ThrowOnError extends boolean = false>(options: Options<RegistryUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RegistryUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/registry.update'
    });
};

export const registryAll = <ThrowOnError extends boolean = false>(options?: Options<RegistryAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, RegistryAllError, ThrowOnError>({
        ...options,
        url: '/registry.all'
    });
};

export const registryOne = <ThrowOnError extends boolean = false>(options: Options<RegistryOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, RegistryOneError, ThrowOnError>({
        ...options,
        url: '/registry.one'
    });
};

export const registryTestRegistry = <ThrowOnError extends boolean = false>(options: Options<RegistryTestRegistryData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, RegistryTestRegistryError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/registry.testRegistry'
    });
};

export const clusterGetNodes = <ThrowOnError extends boolean = false>(options?: Options<ClusterGetNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ClusterGetNodesError, ThrowOnError>({
        ...options,
        url: '/cluster.getNodes'
    });
};

export const clusterRemoveWorker = <ThrowOnError extends boolean = false>(options: Options<ClusterRemoveWorkerData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ClusterRemoveWorkerError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/cluster.removeWorker'
    });
};

export const clusterAddWorker = <ThrowOnError extends boolean = false>(options?: Options<ClusterAddWorkerData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ClusterAddWorkerError, ThrowOnError>({
        ...options,
        url: '/cluster.addWorker'
    });
};

export const clusterAddManager = <ThrowOnError extends boolean = false>(options?: Options<ClusterAddManagerData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ClusterAddManagerError, ThrowOnError>({
        ...options,
        url: '/cluster.addManager'
    });
};

export const notificationCreateSlack = <ThrowOnError extends boolean = false>(options: Options<NotificationCreateSlackData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationCreateSlackError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.createSlack'
    });
};

export const notificationUpdateSlack = <ThrowOnError extends boolean = false>(options: Options<NotificationUpdateSlackData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationUpdateSlackError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.updateSlack'
    });
};

export const notificationTestSlackConnection = <ThrowOnError extends boolean = false>(options: Options<NotificationTestSlackConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationTestSlackConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.testSlackConnection'
    });
};

export const notificationCreateTelegram = <ThrowOnError extends boolean = false>(options: Options<NotificationCreateTelegramData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationCreateTelegramError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.createTelegram'
    });
};

export const notificationUpdateTelegram = <ThrowOnError extends boolean = false>(options: Options<NotificationUpdateTelegramData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationUpdateTelegramError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.updateTelegram'
    });
};

export const notificationTestTelegramConnection = <ThrowOnError extends boolean = false>(options: Options<NotificationTestTelegramConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationTestTelegramConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.testTelegramConnection'
    });
};

export const notificationCreateDiscord = <ThrowOnError extends boolean = false>(options: Options<NotificationCreateDiscordData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationCreateDiscordError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.createDiscord'
    });
};

export const notificationUpdateDiscord = <ThrowOnError extends boolean = false>(options: Options<NotificationUpdateDiscordData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationUpdateDiscordError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.updateDiscord'
    });
};

export const notificationTestDiscordConnection = <ThrowOnError extends boolean = false>(options: Options<NotificationTestDiscordConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationTestDiscordConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.testDiscordConnection'
    });
};

export const notificationCreateEmail = <ThrowOnError extends boolean = false>(options: Options<NotificationCreateEmailData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationCreateEmailError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.createEmail'
    });
};

export const notificationUpdateEmail = <ThrowOnError extends boolean = false>(options: Options<NotificationUpdateEmailData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationUpdateEmailError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.updateEmail'
    });
};

export const notificationTestEmailConnection = <ThrowOnError extends boolean = false>(options: Options<NotificationTestEmailConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationTestEmailConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.testEmailConnection'
    });
};

export const notificationRemove = <ThrowOnError extends boolean = false>(options: Options<NotificationRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.remove'
    });
};

export const notificationOne = <ThrowOnError extends boolean = false>(options: Options<NotificationOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, NotificationOneError, ThrowOnError>({
        ...options,
        url: '/notification.one'
    });
};

export const notificationAll = <ThrowOnError extends boolean = false>(options?: Options<NotificationAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, NotificationAllError, ThrowOnError>({
        ...options,
        url: '/notification.all'
    });
};

export const notificationReceiveNotification = <ThrowOnError extends boolean = false>(options: Options<NotificationReceiveNotificationData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationReceiveNotificationError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.receiveNotification'
    });
};

export const notificationCreateGotify = <ThrowOnError extends boolean = false>(options: Options<NotificationCreateGotifyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationCreateGotifyError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.createGotify'
    });
};

export const notificationUpdateGotify = <ThrowOnError extends boolean = false>(options: Options<NotificationUpdateGotifyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationUpdateGotifyError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.updateGotify'
    });
};

export const notificationTestGotifyConnection = <ThrowOnError extends boolean = false>(options: Options<NotificationTestGotifyConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, NotificationTestGotifyConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/notification.testGotifyConnection'
    });
};

export const sshKeyCreate = <ThrowOnError extends boolean = false>(options: Options<SshKeyCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SshKeyCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/sshKey.create'
    });
};

export const sshKeyRemove = <ThrowOnError extends boolean = false>(options: Options<SshKeyRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SshKeyRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/sshKey.remove'
    });
};

export const sshKeyOne = <ThrowOnError extends boolean = false>(options: Options<SshKeyOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SshKeyOneError, ThrowOnError>({
        ...options,
        url: '/sshKey.one'
    });
};

export const sshKeyAll = <ThrowOnError extends boolean = false>(options?: Options<SshKeyAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SshKeyAllError, ThrowOnError>({
        ...options,
        url: '/sshKey.all'
    });
};

export const sshKeyGenerate = <ThrowOnError extends boolean = false>(options: Options<SshKeyGenerateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SshKeyGenerateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/sshKey.generate'
    });
};

export const sshKeyUpdate = <ThrowOnError extends boolean = false>(options: Options<SshKeyUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, SshKeyUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/sshKey.update'
    });
};

export const gitProviderGetAll = <ThrowOnError extends boolean = false>(options?: Options<GitProviderGetAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GitProviderGetAllError, ThrowOnError>({
        ...options,
        url: '/gitProvider.getAll'
    });
};

export const gitProviderRemove = <ThrowOnError extends boolean = false>(options: Options<GitProviderRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GitProviderRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitProvider.remove'
    });
};

export const giteaCreate = <ThrowOnError extends boolean = false>(options: Options<GiteaCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GiteaCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitea.create'
    });
};

export const giteaOne = <ThrowOnError extends boolean = false>(options: Options<GiteaOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GiteaOneError, ThrowOnError>({
        ...options,
        url: '/gitea.one'
    });
};

export const giteaGiteaProviders = <ThrowOnError extends boolean = false>(options?: Options<GiteaGiteaProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GiteaGiteaProvidersError, ThrowOnError>({
        ...options,
        url: '/gitea.giteaProviders'
    });
};

export const giteaGetGiteaRepositories = <ThrowOnError extends boolean = false>(options: Options<GiteaGetGiteaRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GiteaGetGiteaRepositoriesError, ThrowOnError>({
        ...options,
        url: '/gitea.getGiteaRepositories'
    });
};

export const giteaGetGiteaBranches = <ThrowOnError extends boolean = false>(options: Options<GiteaGetGiteaBranchesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GiteaGetGiteaBranchesError, ThrowOnError>({
        ...options,
        url: '/gitea.getGiteaBranches'
    });
};

export const giteaTestConnection = <ThrowOnError extends boolean = false>(options: Options<GiteaTestConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GiteaTestConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitea.testConnection'
    });
};

export const giteaUpdate = <ThrowOnError extends boolean = false>(options: Options<GiteaUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GiteaUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitea.update'
    });
};

export const giteaGetGiteaUrl = <ThrowOnError extends boolean = false>(options: Options<GiteaGetGiteaUrlData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GiteaGetGiteaUrlError, ThrowOnError>({
        ...options,
        url: '/gitea.getGiteaUrl'
    });
};

export const bitbucketCreate = <ThrowOnError extends boolean = false>(options: Options<BitbucketCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BitbucketCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/bitbucket.create'
    });
};

export const bitbucketOne = <ThrowOnError extends boolean = false>(options: Options<BitbucketOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, BitbucketOneError, ThrowOnError>({
        ...options,
        url: '/bitbucket.one'
    });
};

export const bitbucketBitbucketProviders = <ThrowOnError extends boolean = false>(options?: Options<BitbucketBitbucketProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, BitbucketBitbucketProvidersError, ThrowOnError>({
        ...options,
        url: '/bitbucket.bitbucketProviders'
    });
};

export const bitbucketGetBitbucketRepositories = <ThrowOnError extends boolean = false>(options: Options<BitbucketGetBitbucketRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, BitbucketGetBitbucketRepositoriesError, ThrowOnError>({
        ...options,
        url: '/bitbucket.getBitbucketRepositories'
    });
};

export const bitbucketGetBitbucketBranches = <ThrowOnError extends boolean = false>(options: Options<BitbucketGetBitbucketBranchesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, BitbucketGetBitbucketBranchesError, ThrowOnError>({
        ...options,
        url: '/bitbucket.getBitbucketBranches'
    });
};

export const bitbucketTestConnection = <ThrowOnError extends boolean = false>(options: Options<BitbucketTestConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BitbucketTestConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/bitbucket.testConnection'
    });
};

export const bitbucketUpdate = <ThrowOnError extends boolean = false>(options: Options<BitbucketUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, BitbucketUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/bitbucket.update'
    });
};

export const gitlabCreate = <ThrowOnError extends boolean = false>(options: Options<GitlabCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GitlabCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitlab.create'
    });
};

export const gitlabOne = <ThrowOnError extends boolean = false>(options: Options<GitlabOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GitlabOneError, ThrowOnError>({
        ...options,
        url: '/gitlab.one'
    });
};

export const gitlabGitlabProviders = <ThrowOnError extends boolean = false>(options?: Options<GitlabGitlabProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GitlabGitlabProvidersError, ThrowOnError>({
        ...options,
        url: '/gitlab.gitlabProviders'
    });
};

export const gitlabGetGitlabRepositories = <ThrowOnError extends boolean = false>(options: Options<GitlabGetGitlabRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GitlabGetGitlabRepositoriesError, ThrowOnError>({
        ...options,
        url: '/gitlab.getGitlabRepositories'
    });
};

export const gitlabGetGitlabBranches = <ThrowOnError extends boolean = false>(options: Options<GitlabGetGitlabBranchesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GitlabGetGitlabBranchesError, ThrowOnError>({
        ...options,
        url: '/gitlab.getGitlabBranches'
    });
};

export const gitlabTestConnection = <ThrowOnError extends boolean = false>(options: Options<GitlabTestConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GitlabTestConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitlab.testConnection'
    });
};

export const gitlabUpdate = <ThrowOnError extends boolean = false>(options: Options<GitlabUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GitlabUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/gitlab.update'
    });
};

export const githubOne = <ThrowOnError extends boolean = false>(options: Options<GithubOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GithubOneError, ThrowOnError>({
        ...options,
        url: '/github.one'
    });
};

export const githubGetGithubRepositories = <ThrowOnError extends boolean = false>(options: Options<GithubGetGithubRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GithubGetGithubRepositoriesError, ThrowOnError>({
        ...options,
        url: '/github.getGithubRepositories'
    });
};

export const githubGetGithubBranches = <ThrowOnError extends boolean = false>(options: Options<GithubGetGithubBranchesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GithubGetGithubBranchesError, ThrowOnError>({
        ...options,
        url: '/github.getGithubBranches'
    });
};

export const githubGithubProviders = <ThrowOnError extends boolean = false>(options?: Options<GithubGithubProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, GithubGithubProvidersError, ThrowOnError>({
        ...options,
        url: '/github.githubProviders'
    });
};

export const githubTestConnection = <ThrowOnError extends boolean = false>(options: Options<GithubTestConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GithubTestConnectionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/github.testConnection'
    });
};

export const githubUpdate = <ThrowOnError extends boolean = false>(options: Options<GithubUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, GithubUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/github.update'
    });
};

export const serverCreate = <ThrowOnError extends boolean = false>(options: Options<ServerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ServerCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/server.create'
    });
};

export const serverOne = <ThrowOnError extends boolean = false>(options: Options<ServerOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerOneError, ThrowOnError>({
        ...options,
        url: '/server.one'
    });
};

export const serverGetDefaultCommand = <ThrowOnError extends boolean = false>(options: Options<ServerGetDefaultCommandData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerGetDefaultCommandError, ThrowOnError>({
        ...options,
        url: '/server.getDefaultCommand'
    });
};

export const serverAll = <ThrowOnError extends boolean = false>(options?: Options<ServerAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerAllError, ThrowOnError>({
        ...options,
        url: '/server.all'
    });
};

export const serverCount = <ThrowOnError extends boolean = false>(options?: Options<ServerCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerCountError, ThrowOnError>({
        ...options,
        url: '/server.count'
    });
};

export const serverWithSshKey = <ThrowOnError extends boolean = false>(options?: Options<ServerWithSshKeyData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerWithSshKeyError, ThrowOnError>({
        ...options,
        url: '/server.withSSHKey'
    });
};

export const serverSetup = <ThrowOnError extends boolean = false>(options: Options<ServerSetupData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ServerSetupError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/server.setup'
    });
};

export const serverValidate = <ThrowOnError extends boolean = false>(options: Options<ServerValidateData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerValidateError, ThrowOnError>({
        ...options,
        url: '/server.validate'
    });
};

export const serverSecurity = <ThrowOnError extends boolean = false>(options: Options<ServerSecurityData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerSecurityError, ThrowOnError>({
        ...options,
        url: '/server.security'
    });
};

export const serverSetupMonitoring = <ThrowOnError extends boolean = false>(options: Options<ServerSetupMonitoringData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ServerSetupMonitoringError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/server.setupMonitoring'
    });
};

export const serverRemove = <ThrowOnError extends boolean = false>(options: Options<ServerRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ServerRemoveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/server.remove'
    });
};

export const serverUpdate = <ThrowOnError extends boolean = false>(options: Options<ServerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ServerUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/server.update'
    });
};

export const serverPublicIp = <ThrowOnError extends boolean = false>(options?: Options<ServerPublicIpData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerPublicIpError, ThrowOnError>({
        ...options,
        url: '/server.publicIp'
    });
};

export const serverGetServerMetrics = <ThrowOnError extends boolean = false>(options: Options<ServerGetServerMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ServerGetServerMetricsError, ThrowOnError>({
        ...options,
        url: '/server.getServerMetrics'
    });
};

export const stripeGetProducts = <ThrowOnError extends boolean = false>(options?: Options<StripeGetProductsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, StripeGetProductsError, ThrowOnError>({
        ...options,
        url: '/stripe.getProducts'
    });
};

export const stripeCreateCheckoutSession = <ThrowOnError extends boolean = false>(options: Options<StripeCreateCheckoutSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, StripeCreateCheckoutSessionError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/stripe.createCheckoutSession'
    });
};

export const stripeCreateCustomerPortalSession = <ThrowOnError extends boolean = false>(options?: Options<StripeCreateCustomerPortalSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, StripeCreateCustomerPortalSessionError, ThrowOnError>({
        ...options,
        url: '/stripe.createCustomerPortalSession'
    });
};

export const stripeCanCreateMoreServers = <ThrowOnError extends boolean = false>(options?: Options<StripeCanCreateMoreServersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, StripeCanCreateMoreServersError, ThrowOnError>({
        ...options,
        url: '/stripe.canCreateMoreServers'
    });
};

export const swarmGetNodes = <ThrowOnError extends boolean = false>(options?: Options<SwarmGetNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SwarmGetNodesError, ThrowOnError>({
        ...options,
        url: '/swarm.getNodes'
    });
};

export const swarmGetNodeInfo = <ThrowOnError extends boolean = false>(options: Options<SwarmGetNodeInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SwarmGetNodeInfoError, ThrowOnError>({
        ...options,
        url: '/swarm.getNodeInfo'
    });
};

export const swarmGetNodeApps = <ThrowOnError extends boolean = false>(options?: Options<SwarmGetNodeAppsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SwarmGetNodeAppsError, ThrowOnError>({
        ...options,
        url: '/swarm.getNodeApps'
    });
};

export const swarmGetAppInfos = <ThrowOnError extends boolean = false>(options: Options<SwarmGetAppInfosData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, SwarmGetAppInfosError, ThrowOnError>({
        ...options,
        url: '/swarm.getAppInfos'
    });
};

export const aiOne = <ThrowOnError extends boolean = false>(options: Options<AiOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, AiOneError, ThrowOnError>({
        ...options,
        url: '/ai.one'
    });
};

export const aiGetModels = <ThrowOnError extends boolean = false>(options: Options<AiGetModelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, AiGetModelsError, ThrowOnError>({
        ...options,
        url: '/ai.getModels'
    });
};

export const aiCreate = <ThrowOnError extends boolean = false>(options: Options<AiCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, AiCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/ai.create'
    });
};

export const aiUpdate = <ThrowOnError extends boolean = false>(options: Options<AiUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, AiUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/ai.update'
    });
};

export const aiGetAll = <ThrowOnError extends boolean = false>(options?: Options<AiGetAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, AiGetAllError, ThrowOnError>({
        ...options,
        url: '/ai.getAll'
    });
};

export const aiGet = <ThrowOnError extends boolean = false>(options: Options<AiGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, AiGetError, ThrowOnError>({
        ...options,
        url: '/ai.get'
    });
};

export const aiDelete = <ThrowOnError extends boolean = false>(options: Options<AiDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, AiDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/ai.delete'
    });
};

export const aiSuggest = <ThrowOnError extends boolean = false>(options: Options<AiSuggestData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, AiSuggestError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/ai.suggest'
    });
};

export const aiDeploy = <ThrowOnError extends boolean = false>(options: Options<AiDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, AiDeployError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/ai.deploy'
    });
};

export const organizationCreate = <ThrowOnError extends boolean = false>(options: Options<OrganizationCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, OrganizationCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organization.create'
    });
};

export const organizationAll = <ThrowOnError extends boolean = false>(options?: Options<OrganizationAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, OrganizationAllError, ThrowOnError>({
        ...options,
        url: '/organization.all'
    });
};

export const organizationOne = <ThrowOnError extends boolean = false>(options: Options<OrganizationOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, OrganizationOneError, ThrowOnError>({
        ...options,
        url: '/organization.one'
    });
};

export const organizationUpdate = <ThrowOnError extends boolean = false>(options: Options<OrganizationUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, OrganizationUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organization.update'
    });
};

export const organizationDelete = <ThrowOnError extends boolean = false>(options: Options<OrganizationDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, OrganizationDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organization.delete'
    });
};

export const organizationAllInvitations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationAllInvitationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, OrganizationAllInvitationsError, ThrowOnError>({
        ...options,
        url: '/organization.allInvitations'
    });
};

export const organizationRemoveInvitation = <ThrowOnError extends boolean = false>(options: Options<OrganizationRemoveInvitationData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, OrganizationRemoveInvitationError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organization.removeInvitation'
    });
};

export const scheduleCreate = <ThrowOnError extends boolean = false>(options: Options<ScheduleCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ScheduleCreateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/schedule.create'
    });
};

export const scheduleUpdate = <ThrowOnError extends boolean = false>(options: Options<ScheduleUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ScheduleUpdateError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/schedule.update'
    });
};

export const scheduleDelete = <ThrowOnError extends boolean = false>(options: Options<ScheduleDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ScheduleDeleteError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/schedule.delete'
    });
};

export const scheduleList = <ThrowOnError extends boolean = false>(options: Options<ScheduleListData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ScheduleListError, ThrowOnError>({
        ...options,
        url: '/schedule.list'
    });
};

export const scheduleOne = <ThrowOnError extends boolean = false>(options: Options<ScheduleOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, ScheduleOneError, ThrowOnError>({
        ...options,
        url: '/schedule.one'
    });
};

export const scheduleRunManually = <ThrowOnError extends boolean = false>(options: Options<ScheduleRunManuallyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ScheduleRunManuallyError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/schedule.runManually'
    });
};