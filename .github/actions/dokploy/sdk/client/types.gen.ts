// This file is auto-generated by @hey-api/openapi-ts

export type AdminSetupMonitoringData = {
    body: {
        metricsConfig: {
            server: {
                refreshRate: number;
                port: number;
                token: string;
                urlCallback: string;
                retentionDays: number;
                cronJob: string;
                thresholds: {
                    cpu: number;
                    memory: number;
                };
            };
            containers: {
                refreshRate: number;
                services: {
                    include?: Array<string>;
                    exclude?: Array<string>;
                };
            };
        };
    };
    url: '/admin.setupMonitoring';
};

export type AdminSetupMonitoringErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AdminSetupMonitoringError = AdminSetupMonitoringErrors[keyof AdminSetupMonitoringErrors];

export type AdminSetupMonitoringResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerGetContainersData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/docker.getContainers';
};

export type DockerGetContainersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerGetContainersError = DockerGetContainersErrors[keyof DockerGetContainersErrors];

export type DockerGetContainersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerRestartContainerData = {
    body: {
        containerId: string;
    };
    url: '/docker.restartContainer';
};

export type DockerRestartContainerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerRestartContainerError = DockerRestartContainerErrors[keyof DockerRestartContainerErrors];

export type DockerRestartContainerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerGetConfigData = {
    body?: never;
    path?: never;
    query: {
        containerId: string;
        serverId?: string;
    };
    url: '/docker.getConfig';
};

export type DockerGetConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerGetConfigError = DockerGetConfigErrors[keyof DockerGetConfigErrors];

export type DockerGetConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerGetContainersByAppNameMatchData = {
    body?: never;
    path?: never;
    query: {
        appType?: 'stack' | 'docker-compose';
        appName: string;
        serverId?: string;
    };
    url: '/docker.getContainersByAppNameMatch';
};

export type DockerGetContainersByAppNameMatchErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerGetContainersByAppNameMatchError = DockerGetContainersByAppNameMatchErrors[keyof DockerGetContainersByAppNameMatchErrors];

export type DockerGetContainersByAppNameMatchResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerGetContainersByAppLabelData = {
    body?: never;
    path?: never;
    query: {
        appName: string;
        serverId?: string;
        type: 'standalone' | 'swarm';
    };
    url: '/docker.getContainersByAppLabel';
};

export type DockerGetContainersByAppLabelErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerGetContainersByAppLabelError = DockerGetContainersByAppLabelErrors[keyof DockerGetContainersByAppLabelErrors];

export type DockerGetContainersByAppLabelResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerGetStackContainersByAppNameData = {
    body?: never;
    path?: never;
    query: {
        appName: string;
        serverId?: string;
    };
    url: '/docker.getStackContainersByAppName';
};

export type DockerGetStackContainersByAppNameErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerGetStackContainersByAppNameError = DockerGetStackContainersByAppNameErrors[keyof DockerGetStackContainersByAppNameErrors];

export type DockerGetStackContainersByAppNameResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DockerGetServiceContainersByAppNameData = {
    body?: never;
    path?: never;
    query: {
        appName: string;
        serverId?: string;
    };
    url: '/docker.getServiceContainersByAppName';
};

export type DockerGetServiceContainersByAppNameErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DockerGetServiceContainersByAppNameError = DockerGetServiceContainersByAppNameErrors[keyof DockerGetServiceContainersByAppNameErrors];

export type DockerGetServiceContainersByAppNameResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProjectCreateData = {
    body: {
        name: string;
        description?: string | null;
        env?: string;
    };
    url: '/project.create';
};

export type ProjectCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ProjectCreateError = ProjectCreateErrors[keyof ProjectCreateErrors];

export type ProjectCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProjectOneData = {
    body?: never;
    path?: never;
    query: {
        projectId: string;
    };
    url: '/project.one';
};

export type ProjectOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ProjectOneError = ProjectOneErrors[keyof ProjectOneErrors];

export type ProjectOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProjectAllData = {
    body?: never;
    url: '/project.all';
};

export type ProjectAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ProjectAllError = ProjectAllErrors[keyof ProjectAllErrors];

export type ProjectAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProjectRemoveData = {
    body: {
        projectId: string;
    };
    url: '/project.remove';
};

export type ProjectRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ProjectRemoveError = ProjectRemoveErrors[keyof ProjectRemoveErrors];

export type ProjectRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProjectUpdateData = {
    body: {
        projectId: string;
        name?: string;
        description?: string | null;
        createdAt?: string;
        organizationId?: string;
        env?: string;
    };
    url: '/project.update';
};

export type ProjectUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ProjectUpdateError = ProjectUpdateErrors[keyof ProjectUpdateErrors];

export type ProjectUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProjectDuplicateData = {
    body: {
        sourceProjectId: string;
        name: string;
        description?: string;
        includeServices?: boolean;
        selectedServices?: Array<{
            id: string;
            type: 'application' | 'postgres' | 'mariadb' | 'mongo' | 'mysql' | 'redis' | 'compose';
        }>;
        duplicateInSameProject?: boolean;
    };
    url: '/project.duplicate';
};

export type ProjectDuplicateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ProjectDuplicateError = ProjectDuplicateErrors[keyof ProjectDuplicateErrors];

export type ProjectDuplicateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationCreateData = {
    body: {
        name: string;
        appName?: string;
        description?: string | null;
        projectId: string;
        serverId?: string | null;
    };
    url: '/application.create';
};

export type ApplicationCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationCreateError = ApplicationCreateErrors[keyof ApplicationCreateErrors];

export type ApplicationCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationOneData = {
    body?: never;
    path?: never;
    query: {
        applicationId: string;
    };
    url: '/application.one';
};

export type ApplicationOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationOneError = ApplicationOneErrors[keyof ApplicationOneErrors];

export type ApplicationOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationReloadData = {
    body: {
        appName: string;
        applicationId: string;
    };
    url: '/application.reload';
};

export type ApplicationReloadErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationReloadError = ApplicationReloadErrors[keyof ApplicationReloadErrors];

export type ApplicationReloadResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationDeleteData = {
    body: {
        applicationId: string;
    };
    url: '/application.delete';
};

export type ApplicationDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationDeleteError = ApplicationDeleteErrors[keyof ApplicationDeleteErrors];

export type ApplicationDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationStopData = {
    body: {
        applicationId: string;
    };
    url: '/application.stop';
};

export type ApplicationStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationStopError = ApplicationStopErrors[keyof ApplicationStopErrors];

export type ApplicationStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationStartData = {
    body: {
        applicationId: string;
    };
    url: '/application.start';
};

export type ApplicationStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationStartError = ApplicationStartErrors[keyof ApplicationStartErrors];

export type ApplicationStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationRedeployData = {
    body: {
        applicationId: string;
    };
    url: '/application.redeploy';
};

export type ApplicationRedeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationRedeployError = ApplicationRedeployErrors[keyof ApplicationRedeployErrors];

export type ApplicationRedeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveEnvironmentData = {
    body: {
        applicationId: string;
        env?: string | null;
        buildArgs?: string | null;
    };
    url: '/application.saveEnvironment';
};

export type ApplicationSaveEnvironmentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveEnvironmentError = ApplicationSaveEnvironmentErrors[keyof ApplicationSaveEnvironmentErrors];

export type ApplicationSaveEnvironmentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveBuildTypeData = {
    body: {
        applicationId: string;
        buildType: 'dockerfile' | 'heroku_buildpacks' | 'paketo_buildpacks' | 'nixpacks' | 'static' | 'railpack';
        dockerfile?: string | null;
        dockerContextPath: string | null;
        dockerBuildStage: string | null;
        herokuVersion?: string | null;
        publishDirectory?: string | null;
    };
    url: '/application.saveBuildType';
};

export type ApplicationSaveBuildTypeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveBuildTypeError = ApplicationSaveBuildTypeErrors[keyof ApplicationSaveBuildTypeErrors];

export type ApplicationSaveBuildTypeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveGithubProviderData = {
    body: {
        applicationId: string;
        repository?: string | null;
        branch?: string | null;
        owner: string | null;
        buildPath?: string | null;
        githubId: string | null;
        watchPaths?: Array<string> | null;
        enableSubmodules: boolean;
        triggerType?: 'push' | 'tag';
    };
    url: '/application.saveGithubProvider';
};

export type ApplicationSaveGithubProviderErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveGithubProviderError = ApplicationSaveGithubProviderErrors[keyof ApplicationSaveGithubProviderErrors];

export type ApplicationSaveGithubProviderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveGitlabProviderData = {
    body: {
        applicationId: string;
        gitlabBranch: string | null;
        gitlabBuildPath: string | null;
        gitlabOwner: string | null;
        gitlabRepository: string | null;
        gitlabId: string | null;
        gitlabProjectId: number | null;
        gitlabPathNamespace: string | null;
        watchPaths?: Array<string> | null;
        enableSubmodules: boolean;
    };
    url: '/application.saveGitlabProvider';
};

export type ApplicationSaveGitlabProviderErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveGitlabProviderError = ApplicationSaveGitlabProviderErrors[keyof ApplicationSaveGitlabProviderErrors];

export type ApplicationSaveGitlabProviderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveBitbucketProviderData = {
    body: {
        bitbucketBranch: string | null;
        bitbucketBuildPath: string | null;
        bitbucketOwner: string | null;
        bitbucketRepository: string | null;
        bitbucketId: string | null;
        applicationId: string;
        watchPaths?: Array<string> | null;
        enableSubmodules: boolean;
    };
    url: '/application.saveBitbucketProvider';
};

export type ApplicationSaveBitbucketProviderErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveBitbucketProviderError = ApplicationSaveBitbucketProviderErrors[keyof ApplicationSaveBitbucketProviderErrors];

export type ApplicationSaveBitbucketProviderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveGiteaProviderData = {
    body: {
        applicationId: string;
        giteaBranch: string | null;
        giteaBuildPath: string | null;
        giteaOwner: string | null;
        giteaRepository: string | null;
        giteaId: string | null;
        watchPaths?: Array<string> | null;
        enableSubmodules: boolean;
    };
    url: '/application.saveGiteaProvider';
};

export type ApplicationSaveGiteaProviderErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveGiteaProviderError = ApplicationSaveGiteaProviderErrors[keyof ApplicationSaveGiteaProviderErrors];

export type ApplicationSaveGiteaProviderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveDockerProviderData = {
    body: {
        dockerImage?: string | null;
        applicationId: string;
        username?: string | null;
        password?: string | null;
        registryUrl?: string | null;
    };
    url: '/application.saveDockerProvider';
};

export type ApplicationSaveDockerProviderErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveDockerProviderError = ApplicationSaveDockerProviderErrors[keyof ApplicationSaveDockerProviderErrors];

export type ApplicationSaveDockerProviderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationSaveGitProdiverData = {
    body: {
        customGitBranch?: string | null;
        applicationId: string;
        customGitBuildPath?: string | null;
        customGitUrl?: string | null;
        watchPaths?: Array<string> | null;
        enableSubmodules: boolean;
        customGitSSHKeyId?: string | null;
    };
    url: '/application.saveGitProdiver';
};

export type ApplicationSaveGitProdiverErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationSaveGitProdiverError = ApplicationSaveGitProdiverErrors[keyof ApplicationSaveGitProdiverErrors];

export type ApplicationSaveGitProdiverResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationMarkRunningData = {
    body: {
        applicationId: string;
    };
    url: '/application.markRunning';
};

export type ApplicationMarkRunningErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationMarkRunningError = ApplicationMarkRunningErrors[keyof ApplicationMarkRunningErrors];

export type ApplicationMarkRunningResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationUpdateData = {
    body: {
        applicationId: string;
        name?: string;
        appName?: string;
        description?: string | null;
        env?: string | null;
        previewEnv?: string | null;
        watchPaths?: Array<string> | null;
        previewBuildArgs?: string | null;
        previewWildcard?: string | null;
        previewPort?: number | null;
        previewHttps?: boolean;
        previewPath?: string | null;
        previewCertificateType?: 'letsencrypt' | 'none' | 'custom';
        previewCustomCertResolver?: string | null;
        previewLimit?: number | null;
        isPreviewDeploymentsActive?: boolean | null;
        buildArgs?: string | null;
        memoryReservation?: string | null;
        memoryLimit?: string | null;
        cpuReservation?: string | null;
        cpuLimit?: string | null;
        title?: string | null;
        enabled?: boolean | null;
        subtitle?: string | null;
        command?: string | null;
        refreshToken?: string | null;
        sourceType?: 'github' | 'docker' | 'git' | 'gitlab' | 'bitbucket' | 'gitea' | 'drop';
        cleanCache?: boolean | null;
        repository?: string | null;
        owner?: string | null;
        branch?: string | null;
        buildPath?: string | null;
        triggerType?: 'push' | 'tag';
        autoDeploy?: boolean | null;
        gitlabProjectId?: number | null;
        gitlabRepository?: string | null;
        gitlabOwner?: string | null;
        gitlabBranch?: string | null;
        gitlabBuildPath?: string | null;
        gitlabPathNamespace?: string | null;
        giteaRepository?: string | null;
        giteaOwner?: string | null;
        giteaBranch?: string | null;
        giteaBuildPath?: string | null;
        bitbucketRepository?: string | null;
        bitbucketOwner?: string | null;
        bitbucketBranch?: string | null;
        bitbucketBuildPath?: string | null;
        username?: string | null;
        password?: string | null;
        dockerImage?: string | null;
        registryUrl?: string | null;
        customGitUrl?: string | null;
        customGitBranch?: string | null;
        customGitBuildPath?: string | null;
        customGitSSHKeyId?: string | null;
        enableSubmodules?: boolean;
        dockerfile?: string | null;
        dockerContextPath?: string | null;
        dockerBuildStage?: string | null;
        dropBuildPath?: string | null;
        healthCheckSwarm?: {
            Test?: Array<string>;
            Interval?: number;
            Timeout?: number;
            StartPeriod?: number;
            Retries?: number;
        } | null;
        restartPolicySwarm?: {
            Condition?: string;
            Delay?: number;
            MaxAttempts?: number;
            Window?: number;
        } | null;
        placementSwarm?: {
            Constraints?: Array<string>;
            Preferences?: Array<{
                Spread: {
                    SpreadDescriptor: string;
                };
            }>;
            MaxReplicas?: number;
            Platforms?: Array<{
                Architecture: string;
                OS: string;
            }>;
        } | null;
        updateConfigSwarm?: {
            Parallelism: number;
            Delay?: number;
            FailureAction?: string;
            Monitor?: number;
            MaxFailureRatio?: number;
            Order: string;
        } | null;
        rollbackConfigSwarm?: {
            Parallelism: number;
            Delay?: number;
            FailureAction?: string;
            Monitor?: number;
            MaxFailureRatio?: number;
            Order: string;
        } | null;
        modeSwarm?: {
            Replicated?: {
                Replicas?: number;
            };
            Global?: {
                [key: string]: never;
            };
            ReplicatedJob?: {
                MaxConcurrent?: number;
                TotalCompletions?: number;
            };
            GlobalJob?: {
                [key: string]: never;
            };
        } | null;
        labelsSwarm?: {
            [key: string]: string;
        } | null;
        networkSwarm?: Array<{
            Target?: string;
            Aliases?: Array<string>;
            DriverOpts?: {
                [key: string]: never;
            };
        }> | null;
        replicas?: number;
        applicationStatus?: 'idle' | 'running' | 'done' | 'error';
        buildType?: 'dockerfile' | 'heroku_buildpacks' | 'paketo_buildpacks' | 'nixpacks' | 'static' | 'railpack';
        herokuVersion?: string | null;
        publishDirectory?: string | null;
        createdAt?: string;
        registryId?: string | null;
        projectId?: string;
        githubId?: string | null;
        gitlabId?: string | null;
        giteaId?: string | null;
        bitbucketId?: string | null;
    };
    url: '/application.update';
};

export type ApplicationUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationUpdateError = ApplicationUpdateErrors[keyof ApplicationUpdateErrors];

export type ApplicationUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationRefreshTokenData = {
    body: {
        applicationId: string;
    };
    url: '/application.refreshToken';
};

export type ApplicationRefreshTokenErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationRefreshTokenError = ApplicationRefreshTokenErrors[keyof ApplicationRefreshTokenErrors];

export type ApplicationRefreshTokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationDeployData = {
    body: {
        applicationId: string;
    };
    url: '/application.deploy';
};

export type ApplicationDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationDeployError = ApplicationDeployErrors[keyof ApplicationDeployErrors];

export type ApplicationDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationCleanQueuesData = {
    body: {
        applicationId: string;
    };
    url: '/application.cleanQueues';
};

export type ApplicationCleanQueuesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationCleanQueuesError = ApplicationCleanQueuesErrors[keyof ApplicationCleanQueuesErrors];

export type ApplicationCleanQueuesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationReadTraefikConfigData = {
    body?: never;
    path?: never;
    query: {
        applicationId: string;
    };
    url: '/application.readTraefikConfig';
};

export type ApplicationReadTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationReadTraefikConfigError = ApplicationReadTraefikConfigErrors[keyof ApplicationReadTraefikConfigErrors];

export type ApplicationReadTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationUpdateTraefikConfigData = {
    body: {
        applicationId: string;
        traefikConfig: string;
    };
    url: '/application.updateTraefikConfig';
};

export type ApplicationUpdateTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationUpdateTraefikConfigError = ApplicationUpdateTraefikConfigErrors[keyof ApplicationUpdateTraefikConfigErrors];

export type ApplicationUpdateTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationReadAppMonitoringData = {
    body?: never;
    path?: never;
    query: {
        appName: string;
    };
    url: '/application.readAppMonitoring';
};

export type ApplicationReadAppMonitoringErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationReadAppMonitoringError = ApplicationReadAppMonitoringErrors[keyof ApplicationReadAppMonitoringErrors];

export type ApplicationReadAppMonitoringResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ApplicationMoveData = {
    body: {
        applicationId: string;
        targetProjectId: string;
    };
    url: '/application.move';
};

export type ApplicationMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ApplicationMoveError = ApplicationMoveErrors[keyof ApplicationMoveErrors];

export type ApplicationMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlCreateData = {
    body: {
        name: string;
        appName: string;
        dockerImage?: string;
        projectId: string;
        description?: string | null;
        databaseName: string;
        databaseUser: string;
        databasePassword: string;
        databaseRootPassword: string;
        serverId?: string | null;
    };
    url: '/mysql.create';
};

export type MysqlCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlCreateError = MysqlCreateErrors[keyof MysqlCreateErrors];

export type MysqlCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlOneData = {
    body?: never;
    path?: never;
    query: {
        mysqlId: string;
    };
    url: '/mysql.one';
};

export type MysqlOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlOneError = MysqlOneErrors[keyof MysqlOneErrors];

export type MysqlOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlStartData = {
    body: {
        mysqlId: string;
    };
    url: '/mysql.start';
};

export type MysqlStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlStartError = MysqlStartErrors[keyof MysqlStartErrors];

export type MysqlStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlStopData = {
    body: {
        mysqlId: string;
    };
    url: '/mysql.stop';
};

export type MysqlStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlStopError = MysqlStopErrors[keyof MysqlStopErrors];

export type MysqlStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlSaveExternalPortData = {
    body: {
        mysqlId: string;
        externalPort: number | null;
    };
    url: '/mysql.saveExternalPort';
};

export type MysqlSaveExternalPortErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlSaveExternalPortError = MysqlSaveExternalPortErrors[keyof MysqlSaveExternalPortErrors];

export type MysqlSaveExternalPortResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlDeployData = {
    body: {
        mysqlId: string;
    };
    url: '/mysql.deploy';
};

export type MysqlDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlDeployError = MysqlDeployErrors[keyof MysqlDeployErrors];

export type MysqlDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlChangeStatusData = {
    body: {
        mysqlId: string;
        applicationStatus: 'idle' | 'running' | 'done' | 'error';
    };
    url: '/mysql.changeStatus';
};

export type MysqlChangeStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlChangeStatusError = MysqlChangeStatusErrors[keyof MysqlChangeStatusErrors];

export type MysqlChangeStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlReloadData = {
    body: {
        mysqlId: string;
        appName: string;
    };
    url: '/mysql.reload';
};

export type MysqlReloadErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlReloadError = MysqlReloadErrors[keyof MysqlReloadErrors];

export type MysqlReloadResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlRemoveData = {
    body: {
        mysqlId: string;
    };
    url: '/mysql.remove';
};

export type MysqlRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlRemoveError = MysqlRemoveErrors[keyof MysqlRemoveErrors];

export type MysqlRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlSaveEnvironmentData = {
    body: {
        mysqlId: string;
        env?: string | null;
    };
    url: '/mysql.saveEnvironment';
};

export type MysqlSaveEnvironmentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlSaveEnvironmentError = MysqlSaveEnvironmentErrors[keyof MysqlSaveEnvironmentErrors];

export type MysqlSaveEnvironmentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlUpdateData = {
    body: {
        mysqlId: string;
        name?: string;
        appName?: string;
        description?: string | null;
        databaseName?: string;
        databaseUser?: string;
        databasePassword?: string;
        databaseRootPassword?: string;
        dockerImage?: string;
        command?: string | null;
        env?: string | null;
        memoryReservation?: string | null;
        memoryLimit?: string | null;
        cpuReservation?: string | null;
        cpuLimit?: string | null;
        externalPort?: number | null;
        applicationStatus?: 'idle' | 'running' | 'done' | 'error';
        createdAt?: string;
        projectId?: string;
    };
    url: '/mysql.update';
};

export type MysqlUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlUpdateError = MysqlUpdateErrors[keyof MysqlUpdateErrors];

export type MysqlUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlMoveData = {
    body: {
        mysqlId: string;
        targetProjectId: string;
    };
    url: '/mysql.move';
};

export type MysqlMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlMoveError = MysqlMoveErrors[keyof MysqlMoveErrors];

export type MysqlMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MysqlRebuildData = {
    body: {
        mysqlId: string;
    };
    url: '/mysql.rebuild';
};

export type MysqlRebuildErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MysqlRebuildError = MysqlRebuildErrors[keyof MysqlRebuildErrors];

export type MysqlRebuildResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresCreateData = {
    body: {
        name: string;
        appName: string;
        databaseName: string;
        databaseUser: string;
        databasePassword: string;
        dockerImage?: string;
        projectId: string;
        description?: string | null;
        serverId?: string | null;
    };
    url: '/postgres.create';
};

export type PostgresCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresCreateError = PostgresCreateErrors[keyof PostgresCreateErrors];

export type PostgresCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresOneData = {
    body?: never;
    path?: never;
    query: {
        postgresId: string;
    };
    url: '/postgres.one';
};

export type PostgresOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresOneError = PostgresOneErrors[keyof PostgresOneErrors];

export type PostgresOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresStartData = {
    body: {
        postgresId: string;
    };
    url: '/postgres.start';
};

export type PostgresStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresStartError = PostgresStartErrors[keyof PostgresStartErrors];

export type PostgresStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresStopData = {
    body: {
        postgresId: string;
    };
    url: '/postgres.stop';
};

export type PostgresStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresStopError = PostgresStopErrors[keyof PostgresStopErrors];

export type PostgresStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresSaveExternalPortData = {
    body: {
        postgresId: string;
        externalPort: number | null;
    };
    url: '/postgres.saveExternalPort';
};

export type PostgresSaveExternalPortErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresSaveExternalPortError = PostgresSaveExternalPortErrors[keyof PostgresSaveExternalPortErrors];

export type PostgresSaveExternalPortResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresDeployData = {
    body: {
        postgresId: string;
    };
    url: '/postgres.deploy';
};

export type PostgresDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresDeployError = PostgresDeployErrors[keyof PostgresDeployErrors];

export type PostgresDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresChangeStatusData = {
    body: {
        postgresId: string;
        applicationStatus: 'idle' | 'running' | 'done' | 'error';
    };
    url: '/postgres.changeStatus';
};

export type PostgresChangeStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresChangeStatusError = PostgresChangeStatusErrors[keyof PostgresChangeStatusErrors];

export type PostgresChangeStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresRemoveData = {
    body: {
        postgresId: string;
    };
    url: '/postgres.remove';
};

export type PostgresRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresRemoveError = PostgresRemoveErrors[keyof PostgresRemoveErrors];

export type PostgresRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresSaveEnvironmentData = {
    body: {
        postgresId: string;
        env?: string | null;
    };
    url: '/postgres.saveEnvironment';
};

export type PostgresSaveEnvironmentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresSaveEnvironmentError = PostgresSaveEnvironmentErrors[keyof PostgresSaveEnvironmentErrors];

export type PostgresSaveEnvironmentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresReloadData = {
    body: {
        postgresId: string;
        appName: string;
    };
    url: '/postgres.reload';
};

export type PostgresReloadErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresReloadError = PostgresReloadErrors[keyof PostgresReloadErrors];

export type PostgresReloadResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresUpdateData = {
    body: {
        postgresId: string;
        name?: string;
        appName?: string;
        databaseName?: string;
        databaseUser?: string;
        databasePassword?: string;
        description?: string | null;
        dockerImage?: string;
        command?: string | null;
        env?: string | null;
        memoryReservation?: string | null;
        externalPort?: number | null;
        memoryLimit?: string | null;
        cpuReservation?: string | null;
        cpuLimit?: string | null;
        applicationStatus?: 'idle' | 'running' | 'done' | 'error';
        createdAt?: string;
        projectId?: string;
    };
    url: '/postgres.update';
};

export type PostgresUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresUpdateError = PostgresUpdateErrors[keyof PostgresUpdateErrors];

export type PostgresUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresMoveData = {
    body: {
        postgresId: string;
        targetProjectId: string;
    };
    url: '/postgres.move';
};

export type PostgresMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresMoveError = PostgresMoveErrors[keyof PostgresMoveErrors];

export type PostgresMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostgresRebuildData = {
    body: {
        postgresId: string;
    };
    url: '/postgres.rebuild';
};

export type PostgresRebuildErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PostgresRebuildError = PostgresRebuildErrors[keyof PostgresRebuildErrors];

export type PostgresRebuildResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisCreateData = {
    body: {
        name: string;
        appName: string;
        databasePassword: string;
        dockerImage?: string;
        projectId: string;
        description?: string | null;
        serverId?: string | null;
    };
    url: '/redis.create';
};

export type RedisCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisCreateError = RedisCreateErrors[keyof RedisCreateErrors];

export type RedisCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisOneData = {
    body?: never;
    path?: never;
    query: {
        redisId: string;
    };
    url: '/redis.one';
};

export type RedisOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisOneError = RedisOneErrors[keyof RedisOneErrors];

export type RedisOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisStartData = {
    body: {
        redisId: string;
    };
    url: '/redis.start';
};

export type RedisStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisStartError = RedisStartErrors[keyof RedisStartErrors];

export type RedisStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisReloadData = {
    body: {
        redisId: string;
        appName: string;
    };
    url: '/redis.reload';
};

export type RedisReloadErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisReloadError = RedisReloadErrors[keyof RedisReloadErrors];

export type RedisReloadResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisStopData = {
    body: {
        redisId: string;
    };
    url: '/redis.stop';
};

export type RedisStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisStopError = RedisStopErrors[keyof RedisStopErrors];

export type RedisStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisSaveExternalPortData = {
    body: {
        redisId: string;
        externalPort: number | null;
    };
    url: '/redis.saveExternalPort';
};

export type RedisSaveExternalPortErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisSaveExternalPortError = RedisSaveExternalPortErrors[keyof RedisSaveExternalPortErrors];

export type RedisSaveExternalPortResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisDeployData = {
    body: {
        redisId: string;
    };
    url: '/redis.deploy';
};

export type RedisDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisDeployError = RedisDeployErrors[keyof RedisDeployErrors];

export type RedisDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisChangeStatusData = {
    body: {
        redisId: string;
        applicationStatus: 'idle' | 'running' | 'done' | 'error';
    };
    url: '/redis.changeStatus';
};

export type RedisChangeStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisChangeStatusError = RedisChangeStatusErrors[keyof RedisChangeStatusErrors];

export type RedisChangeStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisRemoveData = {
    body: {
        redisId: string;
    };
    url: '/redis.remove';
};

export type RedisRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisRemoveError = RedisRemoveErrors[keyof RedisRemoveErrors];

export type RedisRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisSaveEnvironmentData = {
    body: {
        redisId: string;
        env?: string | null;
    };
    url: '/redis.saveEnvironment';
};

export type RedisSaveEnvironmentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisSaveEnvironmentError = RedisSaveEnvironmentErrors[keyof RedisSaveEnvironmentErrors];

export type RedisSaveEnvironmentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisUpdateData = {
    body: {
        redisId: string;
        name?: string;
        appName?: string;
        description?: string | null;
        databasePassword?: string;
        dockerImage?: string;
        command?: string | null;
        env?: string | null;
        memoryReservation?: string | null;
        memoryLimit?: string | null;
        cpuReservation?: string | null;
        cpuLimit?: string | null;
        externalPort?: number | null;
        createdAt?: string;
        applicationStatus?: 'idle' | 'running' | 'done' | 'error';
        projectId?: string;
    };
    url: '/redis.update';
};

export type RedisUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisUpdateError = RedisUpdateErrors[keyof RedisUpdateErrors];

export type RedisUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisMoveData = {
    body: {
        redisId: string;
        targetProjectId: string;
    };
    url: '/redis.move';
};

export type RedisMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisMoveError = RedisMoveErrors[keyof RedisMoveErrors];

export type RedisMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedisRebuildData = {
    body: {
        redisId: string;
    };
    url: '/redis.rebuild';
};

export type RedisRebuildErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedisRebuildError = RedisRebuildErrors[keyof RedisRebuildErrors];

export type RedisRebuildResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoCreateData = {
    body: {
        name: string;
        appName: string;
        dockerImage?: string;
        projectId: string;
        description?: string | null;
        databaseUser: string;
        databasePassword: string;
        serverId?: string | null;
        replicaSets?: boolean | null;
    };
    url: '/mongo.create';
};

export type MongoCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoCreateError = MongoCreateErrors[keyof MongoCreateErrors];

export type MongoCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoOneData = {
    body?: never;
    path?: never;
    query: {
        mongoId: string;
    };
    url: '/mongo.one';
};

export type MongoOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoOneError = MongoOneErrors[keyof MongoOneErrors];

export type MongoOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoStartData = {
    body: {
        mongoId: string;
    };
    url: '/mongo.start';
};

export type MongoStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoStartError = MongoStartErrors[keyof MongoStartErrors];

export type MongoStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoStopData = {
    body: {
        mongoId: string;
    };
    url: '/mongo.stop';
};

export type MongoStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoStopError = MongoStopErrors[keyof MongoStopErrors];

export type MongoStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoSaveExternalPortData = {
    body: {
        mongoId: string;
        externalPort: number | null;
    };
    url: '/mongo.saveExternalPort';
};

export type MongoSaveExternalPortErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoSaveExternalPortError = MongoSaveExternalPortErrors[keyof MongoSaveExternalPortErrors];

export type MongoSaveExternalPortResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoDeployData = {
    body: {
        mongoId: string;
    };
    url: '/mongo.deploy';
};

export type MongoDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoDeployError = MongoDeployErrors[keyof MongoDeployErrors];

export type MongoDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoChangeStatusData = {
    body: {
        mongoId: string;
        applicationStatus: 'idle' | 'running' | 'done' | 'error';
    };
    url: '/mongo.changeStatus';
};

export type MongoChangeStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoChangeStatusError = MongoChangeStatusErrors[keyof MongoChangeStatusErrors];

export type MongoChangeStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoReloadData = {
    body: {
        mongoId: string;
        appName: string;
    };
    url: '/mongo.reload';
};

export type MongoReloadErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoReloadError = MongoReloadErrors[keyof MongoReloadErrors];

export type MongoReloadResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoRemoveData = {
    body: {
        mongoId: string;
    };
    url: '/mongo.remove';
};

export type MongoRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoRemoveError = MongoRemoveErrors[keyof MongoRemoveErrors];

export type MongoRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoSaveEnvironmentData = {
    body: {
        mongoId: string;
        env?: string | null;
    };
    url: '/mongo.saveEnvironment';
};

export type MongoSaveEnvironmentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoSaveEnvironmentError = MongoSaveEnvironmentErrors[keyof MongoSaveEnvironmentErrors];

export type MongoSaveEnvironmentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoUpdateData = {
    body: {
        mongoId: string;
        name?: string;
        appName?: string;
        description?: string | null;
        databaseUser?: string;
        databasePassword?: string;
        dockerImage?: string;
        command?: string | null;
        env?: string | null;
        memoryReservation?: string | null;
        memoryLimit?: string | null;
        cpuReservation?: string | null;
        cpuLimit?: string | null;
        externalPort?: number | null;
        applicationStatus?: 'idle' | 'running' | 'done' | 'error';
        createdAt?: string;
        projectId?: string;
        replicaSets?: boolean | null;
    };
    url: '/mongo.update';
};

export type MongoUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoUpdateError = MongoUpdateErrors[keyof MongoUpdateErrors];

export type MongoUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoMoveData = {
    body: {
        mongoId: string;
        targetProjectId: string;
    };
    url: '/mongo.move';
};

export type MongoMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoMoveError = MongoMoveErrors[keyof MongoMoveErrors];

export type MongoMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MongoRebuildData = {
    body: {
        mongoId: string;
    };
    url: '/mongo.rebuild';
};

export type MongoRebuildErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MongoRebuildError = MongoRebuildErrors[keyof MongoRebuildErrors];

export type MongoRebuildResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbCreateData = {
    body: {
        name: string;
        appName: string;
        dockerImage?: string;
        databaseRootPassword: string;
        projectId: string;
        description?: string | null;
        databaseName: string;
        databaseUser: string;
        databasePassword: string;
        serverId?: string | null;
    };
    url: '/mariadb.create';
};

export type MariadbCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbCreateError = MariadbCreateErrors[keyof MariadbCreateErrors];

export type MariadbCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbOneData = {
    body?: never;
    path?: never;
    query: {
        mariadbId: string;
    };
    url: '/mariadb.one';
};

export type MariadbOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbOneError = MariadbOneErrors[keyof MariadbOneErrors];

export type MariadbOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbStartData = {
    body: {
        mariadbId: string;
    };
    url: '/mariadb.start';
};

export type MariadbStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbStartError = MariadbStartErrors[keyof MariadbStartErrors];

export type MariadbStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbStopData = {
    body: {
        mariadbId: string;
    };
    url: '/mariadb.stop';
};

export type MariadbStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbStopError = MariadbStopErrors[keyof MariadbStopErrors];

export type MariadbStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbSaveExternalPortData = {
    body: {
        mariadbId: string;
        externalPort: number | null;
    };
    url: '/mariadb.saveExternalPort';
};

export type MariadbSaveExternalPortErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbSaveExternalPortError = MariadbSaveExternalPortErrors[keyof MariadbSaveExternalPortErrors];

export type MariadbSaveExternalPortResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbDeployData = {
    body: {
        mariadbId: string;
    };
    url: '/mariadb.deploy';
};

export type MariadbDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbDeployError = MariadbDeployErrors[keyof MariadbDeployErrors];

export type MariadbDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbChangeStatusData = {
    body: {
        mariadbId: string;
        applicationStatus: 'idle' | 'running' | 'done' | 'error';
    };
    url: '/mariadb.changeStatus';
};

export type MariadbChangeStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbChangeStatusError = MariadbChangeStatusErrors[keyof MariadbChangeStatusErrors];

export type MariadbChangeStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbRemoveData = {
    body: {
        mariadbId: string;
    };
    url: '/mariadb.remove';
};

export type MariadbRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbRemoveError = MariadbRemoveErrors[keyof MariadbRemoveErrors];

export type MariadbRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbSaveEnvironmentData = {
    body: {
        mariadbId: string;
        env?: string | null;
    };
    url: '/mariadb.saveEnvironment';
};

export type MariadbSaveEnvironmentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbSaveEnvironmentError = MariadbSaveEnvironmentErrors[keyof MariadbSaveEnvironmentErrors];

export type MariadbSaveEnvironmentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbReloadData = {
    body: {
        mariadbId: string;
        appName: string;
    };
    url: '/mariadb.reload';
};

export type MariadbReloadErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbReloadError = MariadbReloadErrors[keyof MariadbReloadErrors];

export type MariadbReloadResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbUpdateData = {
    body: {
        mariadbId: string;
        name?: string;
        appName?: string;
        description?: string | null;
        databaseName?: string;
        databaseUser?: string;
        databasePassword?: string;
        databaseRootPassword?: string;
        dockerImage?: string;
        command?: string | null;
        env?: string | null;
        memoryReservation?: string | null;
        memoryLimit?: string | null;
        cpuReservation?: string | null;
        cpuLimit?: string | null;
        externalPort?: number | null;
        applicationStatus?: 'idle' | 'running' | 'done' | 'error';
        createdAt?: string;
        projectId?: string;
    };
    url: '/mariadb.update';
};

export type MariadbUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbUpdateError = MariadbUpdateErrors[keyof MariadbUpdateErrors];

export type MariadbUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbMoveData = {
    body: {
        mariadbId: string;
        targetProjectId: string;
    };
    url: '/mariadb.move';
};

export type MariadbMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbMoveError = MariadbMoveErrors[keyof MariadbMoveErrors];

export type MariadbMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MariadbRebuildData = {
    body: {
        mariadbId: string;
    };
    url: '/mariadb.rebuild';
};

export type MariadbRebuildErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MariadbRebuildError = MariadbRebuildErrors[keyof MariadbRebuildErrors];

export type MariadbRebuildResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeCreateData = {
    body: {
        name: string;
        description?: string | null;
        projectId: string;
        composeType?: 'docker-compose' | 'stack';
        appName?: string;
        serverId?: string | null;
        composeFile?: string;
    };
    url: '/compose.create';
};

export type ComposeCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeCreateError = ComposeCreateErrors[keyof ComposeCreateErrors];

export type ComposeCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeOneData = {
    body?: never;
    path?: never;
    query: {
        composeId: string;
    };
    url: '/compose.one';
};

export type ComposeOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeOneError = ComposeOneErrors[keyof ComposeOneErrors];

export type ComposeOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeUpdateData = {
    body: {
        composeId: string;
        name?: string;
        appName?: string;
        description?: string | null;
        env?: string | null;
        composeFile?: string;
        refreshToken?: string | null;
        sourceType?: 'git' | 'github' | 'gitlab' | 'bitbucket' | 'gitea' | 'raw';
        composeType?: 'docker-compose' | 'stack';
        repository?: string | null;
        owner?: string | null;
        branch?: string | null;
        autoDeploy?: boolean | null;
        gitlabProjectId?: number | null;
        gitlabRepository?: string | null;
        gitlabOwner?: string | null;
        gitlabBranch?: string | null;
        gitlabPathNamespace?: string | null;
        bitbucketRepository?: string | null;
        bitbucketOwner?: string | null;
        bitbucketBranch?: string | null;
        giteaRepository?: string | null;
        giteaOwner?: string | null;
        giteaBranch?: string | null;
        customGitUrl?: string | null;
        customGitBranch?: string | null;
        customGitSSHKeyId?: string | null;
        command?: string;
        enableSubmodules?: boolean;
        composePath?: string;
        suffix?: string;
        randomize?: boolean;
        isolatedDeployment?: boolean;
        triggerType?: 'push' | 'tag';
        composeStatus?: 'idle' | 'running' | 'done' | 'error';
        projectId?: string;
        createdAt?: string;
        watchPaths?: Array<string> | null;
        githubId?: string | null;
        gitlabId?: string | null;
        bitbucketId?: string | null;
        giteaId?: string | null;
    };
    url: '/compose.update';
};

export type ComposeUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeUpdateError = ComposeUpdateErrors[keyof ComposeUpdateErrors];

export type ComposeUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeDeleteData = {
    body: {
        composeId: string;
        deleteVolumes: boolean;
    };
    url: '/compose.delete';
};

export type ComposeDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeDeleteError = ComposeDeleteErrors[keyof ComposeDeleteErrors];

export type ComposeDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeCleanQueuesData = {
    body: {
        composeId: string;
    };
    url: '/compose.cleanQueues';
};

export type ComposeCleanQueuesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeCleanQueuesError = ComposeCleanQueuesErrors[keyof ComposeCleanQueuesErrors];

export type ComposeCleanQueuesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeLoadServicesData = {
    body?: never;
    path?: never;
    query: {
        composeId: string;
        type?: unknown | ('fetch' | 'cache');
    };
    url: '/compose.loadServices';
};

export type ComposeLoadServicesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeLoadServicesError = ComposeLoadServicesErrors[keyof ComposeLoadServicesErrors];

export type ComposeLoadServicesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeFetchSourceTypeData = {
    body: {
        composeId: string;
    };
    url: '/compose.fetchSourceType';
};

export type ComposeFetchSourceTypeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeFetchSourceTypeError = ComposeFetchSourceTypeErrors[keyof ComposeFetchSourceTypeErrors];

export type ComposeFetchSourceTypeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeRandomizeComposeData = {
    body: {
        composeId: string;
        suffix?: string;
    };
    url: '/compose.randomizeCompose';
};

export type ComposeRandomizeComposeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeRandomizeComposeError = ComposeRandomizeComposeErrors[keyof ComposeRandomizeComposeErrors];

export type ComposeRandomizeComposeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeIsolatedDeploymentData = {
    body: {
        composeId: string;
        suffix?: string;
    };
    url: '/compose.isolatedDeployment';
};

export type ComposeIsolatedDeploymentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeIsolatedDeploymentError = ComposeIsolatedDeploymentErrors[keyof ComposeIsolatedDeploymentErrors];

export type ComposeIsolatedDeploymentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeGetConvertedComposeData = {
    body?: never;
    path?: never;
    query: {
        composeId: string;
    };
    url: '/compose.getConvertedCompose';
};

export type ComposeGetConvertedComposeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeGetConvertedComposeError = ComposeGetConvertedComposeErrors[keyof ComposeGetConvertedComposeErrors];

export type ComposeGetConvertedComposeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeDeployData = {
    body: {
        composeId: string;
    };
    url: '/compose.deploy';
};

export type ComposeDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeDeployError = ComposeDeployErrors[keyof ComposeDeployErrors];

export type ComposeDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeRedeployData = {
    body: {
        composeId: string;
    };
    url: '/compose.redeploy';
};

export type ComposeRedeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeRedeployError = ComposeRedeployErrors[keyof ComposeRedeployErrors];

export type ComposeRedeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeStopData = {
    body: {
        composeId: string;
    };
    url: '/compose.stop';
};

export type ComposeStopErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeStopError = ComposeStopErrors[keyof ComposeStopErrors];

export type ComposeStopResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeStartData = {
    body: {
        composeId: string;
    };
    url: '/compose.start';
};

export type ComposeStartErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeStartError = ComposeStartErrors[keyof ComposeStartErrors];

export type ComposeStartResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeGetDefaultCommandData = {
    body?: never;
    path?: never;
    query: {
        composeId: string;
    };
    url: '/compose.getDefaultCommand';
};

export type ComposeGetDefaultCommandErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeGetDefaultCommandError = ComposeGetDefaultCommandErrors[keyof ComposeGetDefaultCommandErrors];

export type ComposeGetDefaultCommandResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeRefreshTokenData = {
    body: {
        composeId: string;
    };
    url: '/compose.refreshToken';
};

export type ComposeRefreshTokenErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeRefreshTokenError = ComposeRefreshTokenErrors[keyof ComposeRefreshTokenErrors];

export type ComposeRefreshTokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeDeployTemplateData = {
    body: {
        projectId: string;
        serverId?: string;
        id: string;
        baseUrl?: string;
    };
    url: '/compose.deployTemplate';
};

export type ComposeDeployTemplateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeDeployTemplateError = ComposeDeployTemplateErrors[keyof ComposeDeployTemplateErrors];

export type ComposeDeployTemplateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeTemplatesData = {
    body?: never;
    path?: never;
    query?: {
        baseUrl?: string;
    };
    url: '/compose.templates';
};

export type ComposeTemplatesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeTemplatesError = ComposeTemplatesErrors[keyof ComposeTemplatesErrors];

export type ComposeTemplatesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeGetTagsData = {
    body?: never;
    path?: never;
    query?: {
        baseUrl?: string;
    };
    url: '/compose.getTags';
};

export type ComposeGetTagsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeGetTagsError = ComposeGetTagsErrors[keyof ComposeGetTagsErrors];

export type ComposeGetTagsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeMoveData = {
    body: {
        composeId: string;
        targetProjectId: string;
    };
    url: '/compose.move';
};

export type ComposeMoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeMoveError = ComposeMoveErrors[keyof ComposeMoveErrors];

export type ComposeMoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeProcessTemplateData = {
    body: {
        base64: string;
        composeId: string;
    };
    url: '/compose.processTemplate';
};

export type ComposeProcessTemplateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeProcessTemplateError = ComposeProcessTemplateErrors[keyof ComposeProcessTemplateErrors];

export type ComposeProcessTemplateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ComposeImportData = {
    body: {
        base64: string;
        composeId: string;
    };
    url: '/compose.import';
};

export type ComposeImportErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ComposeImportError = ComposeImportErrors[keyof ComposeImportErrors];

export type ComposeImportResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserAllData = {
    body?: never;
    url: '/user.all';
};

export type UserAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserAllError = UserAllErrors[keyof UserAllErrors];

export type UserAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserOneData = {
    body?: never;
    path?: never;
    query: {
        userId: string;
    };
    url: '/user.one';
};

export type UserOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserOneError = UserOneErrors[keyof UserOneErrors];

export type UserOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetData = {
    body?: never;
    url: '/user.get';
};

export type UserGetErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetError = UserGetErrors[keyof UserGetErrors];

export type UserGetResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserHaveRootAccessData = {
    body?: never;
    url: '/user.haveRootAccess';
};

export type UserHaveRootAccessErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserHaveRootAccessError = UserHaveRootAccessErrors[keyof UserHaveRootAccessErrors];

export type UserHaveRootAccessResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetBackupsData = {
    body?: never;
    url: '/user.getBackups';
};

export type UserGetBackupsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetBackupsError = UserGetBackupsErrors[keyof UserGetBackupsErrors];

export type UserGetBackupsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetServerMetricsData = {
    body?: never;
    url: '/user.getServerMetrics';
};

export type UserGetServerMetricsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetServerMetricsError = UserGetServerMetricsErrors[keyof UserGetServerMetricsErrors];

export type UserGetServerMetricsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserUpdateData = {
    body: {
        id?: string;
        name?: string;
        isRegistered?: boolean;
        expirationDate?: string;
        createdAt2?: string;
        createdAt?: string | null;
        twoFactorEnabled?: boolean | null;
        email?: string;
        emailVerified?: boolean;
        image?: string | null;
        banned?: boolean | null;
        banReason?: string | null;
        banExpires?: string | null;
        updatedAt?: string;
        serverIp?: string | null;
        certificateType?: 'letsencrypt' | 'none' | 'custom';
        https?: boolean;
        host?: string | null;
        letsEncryptEmail?: string | null;
        sshPrivateKey?: string | null;
        enableDockerCleanup?: boolean;
        logCleanupCron?: string | null;
        enablePaidFeatures?: boolean;
        allowImpersonation?: boolean;
        metricsConfig?: {
            server: {
                type: 'Dokploy' | 'Remote';
                refreshRate: number;
                port: number;
                token: string;
                urlCallback: string;
                retentionDays: number;
                cronJob: string;
                thresholds: {
                    cpu: number;
                    memory: number;
                };
            };
            containers: {
                refreshRate: number;
                services: {
                    include: Array<string>;
                    exclude: Array<string>;
                };
            };
        };
        cleanupCacheApplications?: boolean;
        cleanupCacheOnPreviews?: boolean;
        cleanupCacheOnCompose?: boolean;
        stripeCustomerId?: string | null;
        stripeSubscriptionId?: string | null;
        serversQuantity?: number;
        password?: string;
        currentPassword?: string;
    };
    url: '/user.update';
};

export type UserUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserUpdateError = UserUpdateErrors[keyof UserUpdateErrors];

export type UserUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetUserByTokenData = {
    body?: never;
    path?: never;
    query: {
        token: string;
    };
    url: '/user.getUserByToken';
};

export type UserGetUserByTokenErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetUserByTokenError = UserGetUserByTokenErrors[keyof UserGetUserByTokenErrors];

export type UserGetUserByTokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetMetricsTokenData = {
    body?: never;
    url: '/user.getMetricsToken';
};

export type UserGetMetricsTokenErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetMetricsTokenError = UserGetMetricsTokenErrors[keyof UserGetMetricsTokenErrors];

export type UserGetMetricsTokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserRemoveData = {
    body: {
        userId: string;
    };
    url: '/user.remove';
};

export type UserRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserRemoveError = UserRemoveErrors[keyof UserRemoveErrors];

export type UserRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserAssignPermissionsData = {
    body: {
        id: string;
        accessedProjects: Array<string>;
        accessedServices: Array<string>;
        canCreateProjects: boolean;
        canCreateServices: boolean;
        canDeleteProjects: boolean;
        canDeleteServices: boolean;
        canAccessToDocker: boolean;
        canAccessToTraefikFiles: boolean;
        canAccessToAPI: boolean;
        canAccessToSSHKeys: boolean;
        canAccessToGitProviders: boolean;
    };
    url: '/user.assignPermissions';
};

export type UserAssignPermissionsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserAssignPermissionsError = UserAssignPermissionsErrors[keyof UserAssignPermissionsErrors];

export type UserAssignPermissionsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetInvitationsData = {
    body?: never;
    url: '/user.getInvitations';
};

export type UserGetInvitationsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetInvitationsError = UserGetInvitationsErrors[keyof UserGetInvitationsErrors];

export type UserGetInvitationsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGetContainerMetricsData = {
    body?: never;
    path?: never;
    query: {
        url: string;
        token: string;
        appName: string;
        dataPoints: string;
    };
    url: '/user.getContainerMetrics';
};

export type UserGetContainerMetricsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGetContainerMetricsError = UserGetContainerMetricsErrors[keyof UserGetContainerMetricsErrors];

export type UserGetContainerMetricsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserGenerateTokenData = {
    body?: never;
    url: '/user.generateToken';
};

export type UserGenerateTokenErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserGenerateTokenError = UserGenerateTokenErrors[keyof UserGenerateTokenErrors];

export type UserGenerateTokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserDeleteApiKeyData = {
    body: {
        apiKeyId: string;
    };
    url: '/user.deleteApiKey';
};

export type UserDeleteApiKeyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserDeleteApiKeyError = UserDeleteApiKeyErrors[keyof UserDeleteApiKeyErrors];

export type UserDeleteApiKeyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserCreateApiKeyData = {
    body: {
        name: string;
        prefix?: string;
        expiresIn?: number;
        metadata: {
            organizationId: string;
        };
        rateLimitEnabled?: boolean;
        rateLimitTimeWindow?: number;
        rateLimitMax?: number;
        remaining?: number;
        refillAmount?: number;
        refillInterval?: number;
    };
    url: '/user.createApiKey';
};

export type UserCreateApiKeyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserCreateApiKeyError = UserCreateApiKeyErrors[keyof UserCreateApiKeyErrors];

export type UserCreateApiKeyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserCheckUserOrganizationsData = {
    body?: never;
    path?: never;
    query: {
        userId: string;
    };
    url: '/user.checkUserOrganizations';
};

export type UserCheckUserOrganizationsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type UserCheckUserOrganizationsError = UserCheckUserOrganizationsErrors[keyof UserCheckUserOrganizationsErrors];

export type UserCheckUserOrganizationsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainCreateData = {
    body: {
        host: string;
        path?: string | null;
        port?: number | null;
        https?: boolean;
        applicationId?: string | null;
        certificateType?: 'letsencrypt' | 'none' | 'custom';
        customCertResolver?: string | null;
        composeId?: string | null;
        serviceName?: string | null;
        domainType?: 'compose' | 'application' | 'preview';
        previewDeploymentId?: string | null;
    };
    url: '/domain.create';
};

export type DomainCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainCreateError = DomainCreateErrors[keyof DomainCreateErrors];

export type DomainCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainByApplicationIdData = {
    body?: never;
    path?: never;
    query: {
        applicationId: string;
    };
    url: '/domain.byApplicationId';
};

export type DomainByApplicationIdErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainByApplicationIdError = DomainByApplicationIdErrors[keyof DomainByApplicationIdErrors];

export type DomainByApplicationIdResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainByComposeIdData = {
    body?: never;
    path?: never;
    query: {
        composeId: string;
    };
    url: '/domain.byComposeId';
};

export type DomainByComposeIdErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainByComposeIdError = DomainByComposeIdErrors[keyof DomainByComposeIdErrors];

export type DomainByComposeIdResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainGenerateDomainData = {
    body: {
        appName: string;
        serverId?: string;
    };
    url: '/domain.generateDomain';
};

export type DomainGenerateDomainErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainGenerateDomainError = DomainGenerateDomainErrors[keyof DomainGenerateDomainErrors];

export type DomainGenerateDomainResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainCanGenerateTraefikMeDomainsData = {
    body?: never;
    path?: never;
    query: {
        serverId: string;
    };
    url: '/domain.canGenerateTraefikMeDomains';
};

export type DomainCanGenerateTraefikMeDomainsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainCanGenerateTraefikMeDomainsError = DomainCanGenerateTraefikMeDomainsErrors[keyof DomainCanGenerateTraefikMeDomainsErrors];

export type DomainCanGenerateTraefikMeDomainsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainUpdateData = {
    body: {
        host: string;
        path?: string | null;
        port?: number | null;
        https?: boolean;
        certificateType?: 'letsencrypt' | 'none' | 'custom';
        customCertResolver?: string | null;
        serviceName?: string | null;
        domainType?: 'compose' | 'application' | 'preview';
        domainId: string;
    };
    url: '/domain.update';
};

export type DomainUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainUpdateError = DomainUpdateErrors[keyof DomainUpdateErrors];

export type DomainUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainOneData = {
    body?: never;
    path?: never;
    query: {
        domainId: string;
    };
    url: '/domain.one';
};

export type DomainOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainOneError = DomainOneErrors[keyof DomainOneErrors];

export type DomainOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainDeleteData = {
    body: {
        domainId: string;
    };
    url: '/domain.delete';
};

export type DomainDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainDeleteError = DomainDeleteErrors[keyof DomainDeleteErrors];

export type DomainDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DomainValidateDomainData = {
    body: {
        domain: string;
        serverIp?: string;
    };
    url: '/domain.validateDomain';
};

export type DomainValidateDomainErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DomainValidateDomainError = DomainValidateDomainErrors[keyof DomainValidateDomainErrors];

export type DomainValidateDomainResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DestinationCreateData = {
    body: {
        name: string;
        provider: string | null;
        accessKey: string;
        bucket: string;
        region: string;
        endpoint: string;
        secretAccessKey: string;
        serverId?: string;
    };
    url: '/destination.create';
};

export type DestinationCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DestinationCreateError = DestinationCreateErrors[keyof DestinationCreateErrors];

export type DestinationCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DestinationTestConnectionData = {
    body: {
        name: string;
        provider: string | null;
        accessKey: string;
        bucket: string;
        region: string;
        endpoint: string;
        secretAccessKey: string;
        serverId?: string;
    };
    url: '/destination.testConnection';
};

export type DestinationTestConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DestinationTestConnectionError = DestinationTestConnectionErrors[keyof DestinationTestConnectionErrors];

export type DestinationTestConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DestinationOneData = {
    body?: never;
    path?: never;
    query: {
        destinationId: string;
    };
    url: '/destination.one';
};

export type DestinationOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DestinationOneError = DestinationOneErrors[keyof DestinationOneErrors];

export type DestinationOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DestinationAllData = {
    body?: never;
    url: '/destination.all';
};

export type DestinationAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DestinationAllError = DestinationAllErrors[keyof DestinationAllErrors];

export type DestinationAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DestinationRemoveData = {
    body: {
        destinationId: string;
    };
    url: '/destination.remove';
};

export type DestinationRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DestinationRemoveError = DestinationRemoveErrors[keyof DestinationRemoveErrors];

export type DestinationRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DestinationUpdateData = {
    body: {
        name: string;
        accessKey: string;
        bucket: string;
        region: string;
        endpoint: string;
        secretAccessKey: string;
        destinationId: string;
        provider: string | null;
        serverId?: string;
    };
    url: '/destination.update';
};

export type DestinationUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DestinationUpdateError = DestinationUpdateErrors[keyof DestinationUpdateErrors];

export type DestinationUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupCreateData = {
    body: {
        schedule: string;
        enabled?: boolean | null;
        prefix: string;
        destinationId: string;
        keepLatestCount?: number | null;
        database: string;
        mariadbId?: string | null;
        mysqlId?: string | null;
        postgresId?: string | null;
        mongoId?: string | null;
        databaseType: 'postgres' | 'mariadb' | 'mysql' | 'mongo' | 'web-server';
        userId?: string | null;
        backupType?: 'database' | 'compose';
        composeId?: string | null;
        serviceName?: string | null;
        metadata?: unknown;
    };
    url: '/backup.create';
};

export type BackupCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupCreateError = BackupCreateErrors[keyof BackupCreateErrors];

export type BackupCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupOneData = {
    body?: never;
    path?: never;
    query: {
        backupId: string;
    };
    url: '/backup.one';
};

export type BackupOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupOneError = BackupOneErrors[keyof BackupOneErrors];

export type BackupOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupUpdateData = {
    body: {
        schedule: string;
        enabled?: boolean | null;
        prefix: string;
        backupId: string;
        destinationId: string;
        database: string;
        keepLatestCount?: number | null;
        serviceName: string | null;
        metadata?: unknown;
        databaseType: 'postgres' | 'mariadb' | 'mysql' | 'mongo' | 'web-server';
    };
    url: '/backup.update';
};

export type BackupUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupUpdateError = BackupUpdateErrors[keyof BackupUpdateErrors];

export type BackupUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupRemoveData = {
    body: {
        backupId: string;
    };
    url: '/backup.remove';
};

export type BackupRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupRemoveError = BackupRemoveErrors[keyof BackupRemoveErrors];

export type BackupRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupManualBackupPostgresData = {
    body: {
        backupId: string;
    };
    url: '/backup.manualBackupPostgres';
};

export type BackupManualBackupPostgresErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupManualBackupPostgresError = BackupManualBackupPostgresErrors[keyof BackupManualBackupPostgresErrors];

export type BackupManualBackupPostgresResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupManualBackupMySqlData = {
    body: {
        backupId: string;
    };
    url: '/backup.manualBackupMySql';
};

export type BackupManualBackupMySqlErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupManualBackupMySqlError = BackupManualBackupMySqlErrors[keyof BackupManualBackupMySqlErrors];

export type BackupManualBackupMySqlResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupManualBackupMariadbData = {
    body: {
        backupId: string;
    };
    url: '/backup.manualBackupMariadb';
};

export type BackupManualBackupMariadbErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupManualBackupMariadbError = BackupManualBackupMariadbErrors[keyof BackupManualBackupMariadbErrors];

export type BackupManualBackupMariadbResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupManualBackupComposeData = {
    body: {
        backupId: string;
    };
    url: '/backup.manualBackupCompose';
};

export type BackupManualBackupComposeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupManualBackupComposeError = BackupManualBackupComposeErrors[keyof BackupManualBackupComposeErrors];

export type BackupManualBackupComposeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupManualBackupMongoData = {
    body: {
        backupId: string;
    };
    url: '/backup.manualBackupMongo';
};

export type BackupManualBackupMongoErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupManualBackupMongoError = BackupManualBackupMongoErrors[keyof BackupManualBackupMongoErrors];

export type BackupManualBackupMongoResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupManualBackupWebServerData = {
    body: {
        backupId: string;
    };
    url: '/backup.manualBackupWebServer';
};

export type BackupManualBackupWebServerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupManualBackupWebServerError = BackupManualBackupWebServerErrors[keyof BackupManualBackupWebServerErrors];

export type BackupManualBackupWebServerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BackupListBackupFilesData = {
    body?: never;
    path?: never;
    query: {
        destinationId: string;
        search: string;
        serverId?: string;
    };
    url: '/backup.listBackupFiles';
};

export type BackupListBackupFilesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BackupListBackupFilesError = BackupListBackupFilesErrors[keyof BackupListBackupFilesErrors];

export type BackupListBackupFilesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DeploymentAllData = {
    body?: never;
    path?: never;
    query: {
        applicationId: string;
    };
    url: '/deployment.all';
};

export type DeploymentAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DeploymentAllError = DeploymentAllErrors[keyof DeploymentAllErrors];

export type DeploymentAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DeploymentAllByComposeData = {
    body?: never;
    path?: never;
    query: {
        composeId: string;
    };
    url: '/deployment.allByCompose';
};

export type DeploymentAllByComposeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DeploymentAllByComposeError = DeploymentAllByComposeErrors[keyof DeploymentAllByComposeErrors];

export type DeploymentAllByComposeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DeploymentAllByServerData = {
    body?: never;
    path?: never;
    query: {
        serverId: string;
    };
    url: '/deployment.allByServer';
};

export type DeploymentAllByServerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DeploymentAllByServerError = DeploymentAllByServerErrors[keyof DeploymentAllByServerErrors];

export type DeploymentAllByServerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type DeploymentAllByTypeData = {
    body?: never;
    path?: never;
    query: {
        id: string;
        type: 'application' | 'compose' | 'server' | 'schedule' | 'previewDeployment' | 'backup';
    };
    url: '/deployment.allByType';
};

export type DeploymentAllByTypeErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type DeploymentAllByTypeError = DeploymentAllByTypeErrors[keyof DeploymentAllByTypeErrors];

export type DeploymentAllByTypeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PreviewDeploymentAllData = {
    body?: never;
    path?: never;
    query: {
        applicationId: string;
    };
    url: '/previewDeployment.all';
};

export type PreviewDeploymentAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PreviewDeploymentAllError = PreviewDeploymentAllErrors[keyof PreviewDeploymentAllErrors];

export type PreviewDeploymentAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PreviewDeploymentDeleteData = {
    body: {
        previewDeploymentId: string;
    };
    url: '/previewDeployment.delete';
};

export type PreviewDeploymentDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PreviewDeploymentDeleteError = PreviewDeploymentDeleteErrors[keyof PreviewDeploymentDeleteErrors];

export type PreviewDeploymentDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PreviewDeploymentOneData = {
    body?: never;
    path?: never;
    query: {
        previewDeploymentId: string;
    };
    url: '/previewDeployment.one';
};

export type PreviewDeploymentOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PreviewDeploymentOneError = PreviewDeploymentOneErrors[keyof PreviewDeploymentOneErrors];

export type PreviewDeploymentOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MountsCreateData = {
    body: {
        type: 'bind' | 'volume' | 'file';
        hostPath?: string | null;
        volumeName?: string | null;
        content?: string | null;
        mountPath: string;
        serviceType?: 'application' | 'postgres' | 'mysql' | 'mariadb' | 'mongo' | 'redis' | 'compose';
        filePath?: string | null;
        serviceId: string;
    };
    url: '/mounts.create';
};

export type MountsCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MountsCreateError = MountsCreateErrors[keyof MountsCreateErrors];

export type MountsCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MountsRemoveData = {
    body: {
        mountId: string;
    };
    url: '/mounts.remove';
};

export type MountsRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MountsRemoveError = MountsRemoveErrors[keyof MountsRemoveErrors];

export type MountsRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MountsOneData = {
    body?: never;
    path?: never;
    query: {
        mountId: string;
    };
    url: '/mounts.one';
};

export type MountsOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MountsOneError = MountsOneErrors[keyof MountsOneErrors];

export type MountsOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type MountsUpdateData = {
    body: {
        mountId: string;
        type?: 'bind' | 'volume' | 'file';
        hostPath?: string | null;
        volumeName?: string | null;
        filePath?: string | null;
        content?: string | null;
        serviceType?: 'application' | 'postgres' | 'mysql' | 'mariadb' | 'mongo' | 'redis' | 'compose';
        mountPath?: string;
        applicationId?: string | null;
        postgresId?: string | null;
        mariadbId?: string | null;
        mongoId?: string | null;
        mysqlId?: string | null;
        redisId?: string | null;
        composeId?: string | null;
    };
    url: '/mounts.update';
};

export type MountsUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type MountsUpdateError = MountsUpdateErrors[keyof MountsUpdateErrors];

export type MountsUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CertificatesCreateData = {
    body: {
        certificateId?: string;
        name: string;
        certificateData: string;
        privateKey: string;
        certificatePath?: string;
        autoRenew?: boolean | null;
        organizationId: string;
        serverId?: string | null;
    };
    url: '/certificates.create';
};

export type CertificatesCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type CertificatesCreateError = CertificatesCreateErrors[keyof CertificatesCreateErrors];

export type CertificatesCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CertificatesOneData = {
    body?: never;
    path?: never;
    query: {
        certificateId: string;
    };
    url: '/certificates.one';
};

export type CertificatesOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type CertificatesOneError = CertificatesOneErrors[keyof CertificatesOneErrors];

export type CertificatesOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CertificatesRemoveData = {
    body: {
        certificateId: string;
    };
    url: '/certificates.remove';
};

export type CertificatesRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type CertificatesRemoveError = CertificatesRemoveErrors[keyof CertificatesRemoveErrors];

export type CertificatesRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CertificatesAllData = {
    body?: never;
    url: '/certificates.all';
};

export type CertificatesAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type CertificatesAllError = CertificatesAllErrors[keyof CertificatesAllErrors];

export type CertificatesAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReloadServerData = {
    body?: never;
    url: '/settings.reloadServer';
};

export type SettingsReloadServerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReloadServerError = SettingsReloadServerErrors[keyof SettingsReloadServerErrors];

export type SettingsReloadServerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanRedisData = {
    body?: never;
    url: '/settings.cleanRedis';
};

export type SettingsCleanRedisErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanRedisError = SettingsCleanRedisErrors[keyof SettingsCleanRedisErrors];

export type SettingsCleanRedisResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReloadRedisData = {
    body?: never;
    url: '/settings.reloadRedis';
};

export type SettingsReloadRedisErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReloadRedisError = SettingsReloadRedisErrors[keyof SettingsReloadRedisErrors];

export type SettingsReloadRedisResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReloadTraefikData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.reloadTraefik';
};

export type SettingsReloadTraefikErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReloadTraefikError = SettingsReloadTraefikErrors[keyof SettingsReloadTraefikErrors];

export type SettingsReloadTraefikResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsToggleDashboardData = {
    body: {
        enableDashboard?: boolean;
        serverId?: string;
    };
    url: '/settings.toggleDashboard';
};

export type SettingsToggleDashboardErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsToggleDashboardError = SettingsToggleDashboardErrors[keyof SettingsToggleDashboardErrors];

export type SettingsToggleDashboardResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanUnusedImagesData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.cleanUnusedImages';
};

export type SettingsCleanUnusedImagesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanUnusedImagesError = SettingsCleanUnusedImagesErrors[keyof SettingsCleanUnusedImagesErrors];

export type SettingsCleanUnusedImagesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanUnusedVolumesData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.cleanUnusedVolumes';
};

export type SettingsCleanUnusedVolumesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanUnusedVolumesError = SettingsCleanUnusedVolumesErrors[keyof SettingsCleanUnusedVolumesErrors];

export type SettingsCleanUnusedVolumesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanStoppedContainersData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.cleanStoppedContainers';
};

export type SettingsCleanStoppedContainersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanStoppedContainersError = SettingsCleanStoppedContainersErrors[keyof SettingsCleanStoppedContainersErrors];

export type SettingsCleanStoppedContainersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanDockerBuilderData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.cleanDockerBuilder';
};

export type SettingsCleanDockerBuilderErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanDockerBuilderError = SettingsCleanDockerBuilderErrors[keyof SettingsCleanDockerBuilderErrors];

export type SettingsCleanDockerBuilderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanDockerPruneData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.cleanDockerPrune';
};

export type SettingsCleanDockerPruneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanDockerPruneError = SettingsCleanDockerPruneErrors[keyof SettingsCleanDockerPruneErrors];

export type SettingsCleanDockerPruneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanAllData = {
    body?: {
        serverId?: string;
    };
    url: '/settings.cleanAll';
};

export type SettingsCleanAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanAllError = SettingsCleanAllErrors[keyof SettingsCleanAllErrors];

export type SettingsCleanAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanMonitoringData = {
    body?: never;
    url: '/settings.cleanMonitoring';
};

export type SettingsCleanMonitoringErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanMonitoringError = SettingsCleanMonitoringErrors[keyof SettingsCleanMonitoringErrors];

export type SettingsCleanMonitoringResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsSaveSshPrivateKeyData = {
    body: {
        sshPrivateKey: string | null;
    };
    url: '/settings.saveSSHPrivateKey';
};

export type SettingsSaveSshPrivateKeyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsSaveSshPrivateKeyError = SettingsSaveSshPrivateKeyErrors[keyof SettingsSaveSshPrivateKeyErrors];

export type SettingsSaveSshPrivateKeyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsAssignDomainServerData = {
    body: {
        host: string | null;
        certificateType: 'letsencrypt' | 'none' | 'custom';
        letsEncryptEmail?: string | null;
        https?: boolean;
    };
    url: '/settings.assignDomainServer';
};

export type SettingsAssignDomainServerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsAssignDomainServerError = SettingsAssignDomainServerErrors[keyof SettingsAssignDomainServerErrors];

export type SettingsAssignDomainServerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCleanSshPrivateKeyData = {
    body?: never;
    url: '/settings.cleanSSHPrivateKey';
};

export type SettingsCleanSshPrivateKeyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCleanSshPrivateKeyError = SettingsCleanSshPrivateKeyErrors[keyof SettingsCleanSshPrivateKeyErrors];

export type SettingsCleanSshPrivateKeyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateDockerCleanupData = {
    body: {
        enableDockerCleanup: boolean;
        serverId?: string;
    };
    url: '/settings.updateDockerCleanup';
};

export type SettingsUpdateDockerCleanupErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateDockerCleanupError = SettingsUpdateDockerCleanupErrors[keyof SettingsUpdateDockerCleanupErrors];

export type SettingsUpdateDockerCleanupResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReadTraefikConfigData = {
    body?: never;
    url: '/settings.readTraefikConfig';
};

export type SettingsReadTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReadTraefikConfigError = SettingsReadTraefikConfigErrors[keyof SettingsReadTraefikConfigErrors];

export type SettingsReadTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateTraefikConfigData = {
    body: {
        traefikConfig: string;
    };
    url: '/settings.updateTraefikConfig';
};

export type SettingsUpdateTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateTraefikConfigError = SettingsUpdateTraefikConfigErrors[keyof SettingsUpdateTraefikConfigErrors];

export type SettingsUpdateTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReadWebServerTraefikConfigData = {
    body?: never;
    url: '/settings.readWebServerTraefikConfig';
};

export type SettingsReadWebServerTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReadWebServerTraefikConfigError = SettingsReadWebServerTraefikConfigErrors[keyof SettingsReadWebServerTraefikConfigErrors];

export type SettingsReadWebServerTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateWebServerTraefikConfigData = {
    body: {
        traefikConfig: string;
    };
    url: '/settings.updateWebServerTraefikConfig';
};

export type SettingsUpdateWebServerTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateWebServerTraefikConfigError = SettingsUpdateWebServerTraefikConfigErrors[keyof SettingsUpdateWebServerTraefikConfigErrors];

export type SettingsUpdateWebServerTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReadMiddlewareTraefikConfigData = {
    body?: never;
    url: '/settings.readMiddlewareTraefikConfig';
};

export type SettingsReadMiddlewareTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReadMiddlewareTraefikConfigError = SettingsReadMiddlewareTraefikConfigErrors[keyof SettingsReadMiddlewareTraefikConfigErrors];

export type SettingsReadMiddlewareTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateMiddlewareTraefikConfigData = {
    body: {
        traefikConfig: string;
    };
    url: '/settings.updateMiddlewareTraefikConfig';
};

export type SettingsUpdateMiddlewareTraefikConfigErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateMiddlewareTraefikConfigError = SettingsUpdateMiddlewareTraefikConfigErrors[keyof SettingsUpdateMiddlewareTraefikConfigErrors];

export type SettingsUpdateMiddlewareTraefikConfigResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetUpdateDataData = {
    body?: never;
    url: '/settings.getUpdateData';
};

export type SettingsGetUpdateDataErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetUpdateDataError = SettingsGetUpdateDataErrors[keyof SettingsGetUpdateDataErrors];

export type SettingsGetUpdateDataResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateServerData = {
    body?: never;
    url: '/settings.updateServer';
};

export type SettingsUpdateServerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateServerError = SettingsUpdateServerErrors[keyof SettingsUpdateServerErrors];

export type SettingsUpdateServerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetDokployVersionData = {
    body?: never;
    url: '/settings.getDokployVersion';
};

export type SettingsGetDokployVersionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetDokployVersionError = SettingsGetDokployVersionErrors[keyof SettingsGetDokployVersionErrors];

export type SettingsGetDokployVersionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetReleaseTagData = {
    body?: never;
    url: '/settings.getReleaseTag';
};

export type SettingsGetReleaseTagErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetReleaseTagError = SettingsGetReleaseTagErrors[keyof SettingsGetReleaseTagErrors];

export type SettingsGetReleaseTagResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReadDirectoriesData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/settings.readDirectories';
};

export type SettingsReadDirectoriesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReadDirectoriesError = SettingsReadDirectoriesErrors[keyof SettingsReadDirectoriesErrors];

export type SettingsReadDirectoriesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateTraefikFileData = {
    body: {
        path: string;
        traefikConfig: string;
        serverId?: string;
    };
    url: '/settings.updateTraefikFile';
};

export type SettingsUpdateTraefikFileErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateTraefikFileError = SettingsUpdateTraefikFileErrors[keyof SettingsUpdateTraefikFileErrors];

export type SettingsUpdateTraefikFileResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReadTraefikFileData = {
    body?: never;
    path?: never;
    query: {
        path: string;
        serverId?: string;
    };
    url: '/settings.readTraefikFile';
};

export type SettingsReadTraefikFileErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReadTraefikFileError = SettingsReadTraefikFileErrors[keyof SettingsReadTraefikFileErrors];

export type SettingsReadTraefikFileResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetIpData = {
    body?: never;
    url: '/settings.getIp';
};

export type SettingsGetIpErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetIpError = SettingsGetIpErrors[keyof SettingsGetIpErrors];

export type SettingsGetIpResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetOpenApiDocumentData = {
    body?: never;
    url: '/settings.getOpenApiDocument';
};

export type SettingsGetOpenApiDocumentErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetOpenApiDocumentError = SettingsGetOpenApiDocumentErrors[keyof SettingsGetOpenApiDocumentErrors];

export type SettingsGetOpenApiDocumentResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsReadTraefikEnvData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/settings.readTraefikEnv';
};

export type SettingsReadTraefikEnvErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsReadTraefikEnvError = SettingsReadTraefikEnvErrors[keyof SettingsReadTraefikEnvErrors];

export type SettingsReadTraefikEnvResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsWriteTraefikEnvData = {
    body: {
        env: string;
        serverId?: string;
    };
    url: '/settings.writeTraefikEnv';
};

export type SettingsWriteTraefikEnvErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsWriteTraefikEnvError = SettingsWriteTraefikEnvErrors[keyof SettingsWriteTraefikEnvErrors];

export type SettingsWriteTraefikEnvResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsHaveTraefikDashboardPortEnabledData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/settings.haveTraefikDashboardPortEnabled';
};

export type SettingsHaveTraefikDashboardPortEnabledErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsHaveTraefikDashboardPortEnabledError = SettingsHaveTraefikDashboardPortEnabledErrors[keyof SettingsHaveTraefikDashboardPortEnabledErrors];

export type SettingsHaveTraefikDashboardPortEnabledResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsHaveActivateRequestsData = {
    body?: never;
    url: '/settings.haveActivateRequests';
};

export type SettingsHaveActivateRequestsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsHaveActivateRequestsError = SettingsHaveActivateRequestsErrors[keyof SettingsHaveActivateRequestsErrors];

export type SettingsHaveActivateRequestsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsToggleRequestsData = {
    body: {
        enable: boolean;
    };
    url: '/settings.toggleRequests';
};

export type SettingsToggleRequestsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsToggleRequestsError = SettingsToggleRequestsErrors[keyof SettingsToggleRequestsErrors];

export type SettingsToggleRequestsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsIsCloudData = {
    body?: never;
    url: '/settings.isCloud';
};

export type SettingsIsCloudErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsIsCloudError = SettingsIsCloudErrors[keyof SettingsIsCloudErrors];

export type SettingsIsCloudResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsHealthData = {
    body?: never;
    url: '/settings.health';
};

export type SettingsHealthErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsHealthError = SettingsHealthErrors[keyof SettingsHealthErrors];

export type SettingsHealthResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsSetupGpuData = {
    body: {
        serverId?: string;
    };
    url: '/settings.setupGPU';
};

export type SettingsSetupGpuErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsSetupGpuError = SettingsSetupGpuErrors[keyof SettingsSetupGpuErrors];

export type SettingsSetupGpuResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsCheckGpuStatusData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/settings.checkGPUStatus';
};

export type SettingsCheckGpuStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsCheckGpuStatusError = SettingsCheckGpuStatusErrors[keyof SettingsCheckGpuStatusErrors];

export type SettingsCheckGpuStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateTraefikPortsData = {
    body: {
        serverId?: string;
        additionalPorts: Array<{
            targetPort: number;
            publishedPort: number;
        }>;
    };
    url: '/settings.updateTraefikPorts';
};

export type SettingsUpdateTraefikPortsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateTraefikPortsError = SettingsUpdateTraefikPortsErrors[keyof SettingsUpdateTraefikPortsErrors];

export type SettingsUpdateTraefikPortsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetTraefikPortsData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/settings.getTraefikPorts';
};

export type SettingsGetTraefikPortsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetTraefikPortsError = SettingsGetTraefikPortsErrors[keyof SettingsGetTraefikPortsErrors];

export type SettingsGetTraefikPortsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsUpdateLogCleanupData = {
    body: {
        cronExpression: string | null;
    };
    url: '/settings.updateLogCleanup';
};

export type SettingsUpdateLogCleanupErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsUpdateLogCleanupError = SettingsUpdateLogCleanupErrors[keyof SettingsUpdateLogCleanupErrors];

export type SettingsUpdateLogCleanupResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SettingsGetLogCleanupStatusData = {
    body?: never;
    url: '/settings.getLogCleanupStatus';
};

export type SettingsGetLogCleanupStatusErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SettingsGetLogCleanupStatusError = SettingsGetLogCleanupStatusErrors[keyof SettingsGetLogCleanupStatusErrors];

export type SettingsGetLogCleanupStatusResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SecurityCreateData = {
    body: {
        applicationId: string;
        username: string;
        password: string;
    };
    url: '/security.create';
};

export type SecurityCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SecurityCreateError = SecurityCreateErrors[keyof SecurityCreateErrors];

export type SecurityCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SecurityOneData = {
    body?: never;
    path?: never;
    query: {
        securityId: string;
    };
    url: '/security.one';
};

export type SecurityOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SecurityOneError = SecurityOneErrors[keyof SecurityOneErrors];

export type SecurityOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SecurityDeleteData = {
    body: {
        securityId: string;
    };
    url: '/security.delete';
};

export type SecurityDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SecurityDeleteError = SecurityDeleteErrors[keyof SecurityDeleteErrors];

export type SecurityDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SecurityUpdateData = {
    body: {
        securityId: string;
        username: string;
        password: string;
    };
    url: '/security.update';
};

export type SecurityUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SecurityUpdateError = SecurityUpdateErrors[keyof SecurityUpdateErrors];

export type SecurityUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedirectsCreateData = {
    body: {
        regex: string;
        replacement: string;
        permanent: boolean;
        applicationId: string;
    };
    url: '/redirects.create';
};

export type RedirectsCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedirectsCreateError = RedirectsCreateErrors[keyof RedirectsCreateErrors];

export type RedirectsCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedirectsOneData = {
    body?: never;
    path?: never;
    query: {
        redirectId: string;
    };
    url: '/redirects.one';
};

export type RedirectsOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedirectsOneError = RedirectsOneErrors[keyof RedirectsOneErrors];

export type RedirectsOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedirectsDeleteData = {
    body: {
        redirectId: string;
    };
    url: '/redirects.delete';
};

export type RedirectsDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedirectsDeleteError = RedirectsDeleteErrors[keyof RedirectsDeleteErrors];

export type RedirectsDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RedirectsUpdateData = {
    body: {
        redirectId: string;
        regex: string;
        replacement: string;
        permanent: boolean;
    };
    url: '/redirects.update';
};

export type RedirectsUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RedirectsUpdateError = RedirectsUpdateErrors[keyof RedirectsUpdateErrors];

export type RedirectsUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PortCreateData = {
    body: {
        publishedPort: number;
        targetPort: number;
        protocol?: 'tcp' | 'udp';
        applicationId: string;
    };
    url: '/port.create';
};

export type PortCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PortCreateError = PortCreateErrors[keyof PortCreateErrors];

export type PortCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PortOneData = {
    body?: never;
    path?: never;
    query: {
        portId: string;
    };
    url: '/port.one';
};

export type PortOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PortOneError = PortOneErrors[keyof PortOneErrors];

export type PortOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PortDeleteData = {
    body: {
        portId: string;
    };
    url: '/port.delete';
};

export type PortDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PortDeleteError = PortDeleteErrors[keyof PortDeleteErrors];

export type PortDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PortUpdateData = {
    body: {
        portId: string;
        publishedPort: number;
        targetPort: number;
        protocol?: 'tcp' | 'udp';
    };
    url: '/port.update';
};

export type PortUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type PortUpdateError = PortUpdateErrors[keyof PortUpdateErrors];

export type PortUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RegistryCreateData = {
    body: {
        registryName: string;
        username: string;
        password: string;
        registryUrl: string;
        registryType: 'cloud';
        imagePrefix: string | null;
        serverId?: string;
    };
    url: '/registry.create';
};

export type RegistryCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RegistryCreateError = RegistryCreateErrors[keyof RegistryCreateErrors];

export type RegistryCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RegistryRemoveData = {
    body: {
        registryId: string;
    };
    url: '/registry.remove';
};

export type RegistryRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RegistryRemoveError = RegistryRemoveErrors[keyof RegistryRemoveErrors];

export type RegistryRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RegistryUpdateData = {
    body: {
        registryId: string;
        registryName?: string;
        imagePrefix?: string | null;
        username?: string;
        password?: string;
        registryUrl?: string;
        createdAt?: string;
        registryType?: 'cloud';
        organizationId?: string;
        serverId?: string;
    };
    url: '/registry.update';
};

export type RegistryUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RegistryUpdateError = RegistryUpdateErrors[keyof RegistryUpdateErrors];

export type RegistryUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RegistryAllData = {
    body?: never;
    url: '/registry.all';
};

export type RegistryAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RegistryAllError = RegistryAllErrors[keyof RegistryAllErrors];

export type RegistryAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RegistryOneData = {
    body?: never;
    path?: never;
    query: {
        registryId: string;
    };
    url: '/registry.one';
};

export type RegistryOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RegistryOneError = RegistryOneErrors[keyof RegistryOneErrors];

export type RegistryOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type RegistryTestRegistryData = {
    body: {
        registryName?: string;
        username: string;
        password: string;
        registryUrl: string;
        registryType: 'cloud';
        imagePrefix?: string | null;
        serverId?: string;
    };
    url: '/registry.testRegistry';
};

export type RegistryTestRegistryErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type RegistryTestRegistryError = RegistryTestRegistryErrors[keyof RegistryTestRegistryErrors];

export type RegistryTestRegistryResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ClusterGetNodesData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/cluster.getNodes';
};

export type ClusterGetNodesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ClusterGetNodesError = ClusterGetNodesErrors[keyof ClusterGetNodesErrors];

export type ClusterGetNodesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ClusterRemoveWorkerData = {
    body: {
        nodeId: string;
        serverId?: string;
    };
    url: '/cluster.removeWorker';
};

export type ClusterRemoveWorkerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ClusterRemoveWorkerError = ClusterRemoveWorkerErrors[keyof ClusterRemoveWorkerErrors];

export type ClusterRemoveWorkerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ClusterAddWorkerData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/cluster.addWorker';
};

export type ClusterAddWorkerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ClusterAddWorkerError = ClusterAddWorkerErrors[keyof ClusterAddWorkerErrors];

export type ClusterAddWorkerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ClusterAddManagerData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/cluster.addManager';
};

export type ClusterAddManagerErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ClusterAddManagerError = ClusterAddManagerErrors[keyof ClusterAddManagerErrors];

export type ClusterAddManagerResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationCreateSlackData = {
    body: {
        appBuildError: boolean;
        databaseBackup: boolean;
        dokployRestart: boolean;
        name: string;
        appDeploy: boolean;
        dockerCleanup: boolean;
        serverThreshold: boolean;
        webhookUrl: string;
        channel: string;
    };
    url: '/notification.createSlack';
};

export type NotificationCreateSlackErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationCreateSlackError = NotificationCreateSlackErrors[keyof NotificationCreateSlackErrors];

export type NotificationCreateSlackResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationUpdateSlackData = {
    body: {
        appBuildError?: boolean;
        databaseBackup?: boolean;
        dokployRestart?: boolean;
        name?: string;
        appDeploy?: boolean;
        dockerCleanup?: boolean;
        serverThreshold?: boolean;
        webhookUrl?: string;
        channel?: string;
        notificationId: string;
        slackId: string;
        organizationId?: string;
    };
    url: '/notification.updateSlack';
};

export type NotificationUpdateSlackErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationUpdateSlackError = NotificationUpdateSlackErrors[keyof NotificationUpdateSlackErrors];

export type NotificationUpdateSlackResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationTestSlackConnectionData = {
    body: {
        webhookUrl: string;
        channel: string;
    };
    url: '/notification.testSlackConnection';
};

export type NotificationTestSlackConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationTestSlackConnectionError = NotificationTestSlackConnectionErrors[keyof NotificationTestSlackConnectionErrors];

export type NotificationTestSlackConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationCreateTelegramData = {
    body: {
        appBuildError: boolean;
        databaseBackup: boolean;
        dokployRestart: boolean;
        name: string;
        appDeploy: boolean;
        dockerCleanup: boolean;
        serverThreshold: boolean;
        botToken: string;
        chatId: string;
        messageThreadId: string;
    };
    url: '/notification.createTelegram';
};

export type NotificationCreateTelegramErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationCreateTelegramError = NotificationCreateTelegramErrors[keyof NotificationCreateTelegramErrors];

export type NotificationCreateTelegramResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationUpdateTelegramData = {
    body: {
        appBuildError?: boolean;
        databaseBackup?: boolean;
        dokployRestart?: boolean;
        name?: string;
        appDeploy?: boolean;
        dockerCleanup?: boolean;
        serverThreshold?: boolean;
        botToken?: string;
        chatId?: string;
        messageThreadId?: string;
        notificationId: string;
        telegramId: string;
        organizationId?: string;
    };
    url: '/notification.updateTelegram';
};

export type NotificationUpdateTelegramErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationUpdateTelegramError = NotificationUpdateTelegramErrors[keyof NotificationUpdateTelegramErrors];

export type NotificationUpdateTelegramResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationTestTelegramConnectionData = {
    body: {
        botToken: string;
        chatId: string;
        messageThreadId: string;
    };
    url: '/notification.testTelegramConnection';
};

export type NotificationTestTelegramConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationTestTelegramConnectionError = NotificationTestTelegramConnectionErrors[keyof NotificationTestTelegramConnectionErrors];

export type NotificationTestTelegramConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationCreateDiscordData = {
    body: {
        appBuildError: boolean;
        databaseBackup: boolean;
        dokployRestart: boolean;
        name: string;
        appDeploy: boolean;
        dockerCleanup: boolean;
        serverThreshold: boolean;
        webhookUrl: string;
        decoration: boolean;
    };
    url: '/notification.createDiscord';
};

export type NotificationCreateDiscordErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationCreateDiscordError = NotificationCreateDiscordErrors[keyof NotificationCreateDiscordErrors];

export type NotificationCreateDiscordResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationUpdateDiscordData = {
    body: {
        appBuildError?: boolean;
        databaseBackup?: boolean;
        dokployRestart?: boolean;
        name?: string;
        appDeploy?: boolean;
        dockerCleanup?: boolean;
        serverThreshold?: boolean;
        webhookUrl?: string;
        decoration?: boolean;
        notificationId: string;
        discordId: string;
        organizationId?: string;
    };
    url: '/notification.updateDiscord';
};

export type NotificationUpdateDiscordErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationUpdateDiscordError = NotificationUpdateDiscordErrors[keyof NotificationUpdateDiscordErrors];

export type NotificationUpdateDiscordResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationTestDiscordConnectionData = {
    body: {
        webhookUrl: string;
        decoration?: boolean;
    };
    url: '/notification.testDiscordConnection';
};

export type NotificationTestDiscordConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationTestDiscordConnectionError = NotificationTestDiscordConnectionErrors[keyof NotificationTestDiscordConnectionErrors];

export type NotificationTestDiscordConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationCreateEmailData = {
    body: {
        appBuildError: boolean;
        databaseBackup: boolean;
        dokployRestart: boolean;
        name: string;
        appDeploy: boolean;
        dockerCleanup: boolean;
        serverThreshold: boolean;
        smtpServer: string;
        smtpPort: number;
        username: string;
        password: string;
        fromAddress: string;
        toAddresses: Array<string>;
    };
    url: '/notification.createEmail';
};

export type NotificationCreateEmailErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationCreateEmailError = NotificationCreateEmailErrors[keyof NotificationCreateEmailErrors];

export type NotificationCreateEmailResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationUpdateEmailData = {
    body: {
        appBuildError?: boolean;
        databaseBackup?: boolean;
        dokployRestart?: boolean;
        name?: string;
        appDeploy?: boolean;
        dockerCleanup?: boolean;
        serverThreshold?: boolean;
        smtpServer?: string;
        smtpPort?: number;
        username?: string;
        password?: string;
        fromAddress?: string;
        toAddresses?: Array<string>;
        notificationId: string;
        emailId: string;
        organizationId?: string;
    };
    url: '/notification.updateEmail';
};

export type NotificationUpdateEmailErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationUpdateEmailError = NotificationUpdateEmailErrors[keyof NotificationUpdateEmailErrors];

export type NotificationUpdateEmailResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationTestEmailConnectionData = {
    body: {
        smtpServer: string;
        smtpPort: number;
        username: string;
        password: string;
        toAddresses: Array<string>;
        fromAddress: string;
    };
    url: '/notification.testEmailConnection';
};

export type NotificationTestEmailConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationTestEmailConnectionError = NotificationTestEmailConnectionErrors[keyof NotificationTestEmailConnectionErrors];

export type NotificationTestEmailConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationRemoveData = {
    body: {
        notificationId: string;
    };
    url: '/notification.remove';
};

export type NotificationRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationRemoveError = NotificationRemoveErrors[keyof NotificationRemoveErrors];

export type NotificationRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationOneData = {
    body?: never;
    path?: never;
    query: {
        notificationId: string;
    };
    url: '/notification.one';
};

export type NotificationOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationOneError = NotificationOneErrors[keyof NotificationOneErrors];

export type NotificationOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationAllData = {
    body?: never;
    url: '/notification.all';
};

export type NotificationAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationAllError = NotificationAllErrors[keyof NotificationAllErrors];

export type NotificationAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationReceiveNotificationData = {
    body: {
        ServerType?: 'Dokploy' | 'Remote';
        Type: 'Memory' | 'CPU';
        Value: number;
        Threshold: number;
        Message: string;
        Timestamp: string;
        Token: string;
    };
    url: '/notification.receiveNotification';
};

export type NotificationReceiveNotificationErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationReceiveNotificationError = NotificationReceiveNotificationErrors[keyof NotificationReceiveNotificationErrors];

export type NotificationReceiveNotificationResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationCreateGotifyData = {
    body: {
        appBuildError: boolean;
        databaseBackup: boolean;
        dokployRestart: boolean;
        name: string;
        appDeploy: boolean;
        dockerCleanup: boolean;
        serverUrl: string;
        appToken: string;
        priority: number;
        decoration: boolean;
    };
    url: '/notification.createGotify';
};

export type NotificationCreateGotifyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationCreateGotifyError = NotificationCreateGotifyErrors[keyof NotificationCreateGotifyErrors];

export type NotificationCreateGotifyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationUpdateGotifyData = {
    body: {
        appBuildError?: boolean;
        databaseBackup?: boolean;
        dokployRestart?: boolean;
        name?: string;
        appDeploy?: boolean;
        dockerCleanup?: boolean;
        serverUrl?: string;
        appToken?: string;
        priority?: number;
        decoration?: boolean;
        notificationId: string;
        gotifyId: string;
        organizationId?: string;
    };
    url: '/notification.updateGotify';
};

export type NotificationUpdateGotifyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationUpdateGotifyError = NotificationUpdateGotifyErrors[keyof NotificationUpdateGotifyErrors];

export type NotificationUpdateGotifyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type NotificationTestGotifyConnectionData = {
    body: {
        serverUrl: string;
        appToken: string;
        priority: number;
        decoration?: boolean;
    };
    url: '/notification.testGotifyConnection';
};

export type NotificationTestGotifyConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type NotificationTestGotifyConnectionError = NotificationTestGotifyConnectionErrors[keyof NotificationTestGotifyConnectionErrors];

export type NotificationTestGotifyConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SshKeyCreateData = {
    body: {
        name: string;
        description?: string | null;
        privateKey: string;
        publicKey: string;
        organizationId: string;
    };
    url: '/sshKey.create';
};

export type SshKeyCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SshKeyCreateError = SshKeyCreateErrors[keyof SshKeyCreateErrors];

export type SshKeyCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SshKeyRemoveData = {
    body: {
        sshKeyId: string;
    };
    url: '/sshKey.remove';
};

export type SshKeyRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SshKeyRemoveError = SshKeyRemoveErrors[keyof SshKeyRemoveErrors];

export type SshKeyRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SshKeyOneData = {
    body?: never;
    path?: never;
    query: {
        sshKeyId: string;
    };
    url: '/sshKey.one';
};

export type SshKeyOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SshKeyOneError = SshKeyOneErrors[keyof SshKeyOneErrors];

export type SshKeyOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SshKeyAllData = {
    body?: never;
    url: '/sshKey.all';
};

export type SshKeyAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SshKeyAllError = SshKeyAllErrors[keyof SshKeyAllErrors];

export type SshKeyAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SshKeyGenerateData = {
    body: {
        type?: 'rsa' | 'ed25519';
    };
    url: '/sshKey.generate';
};

export type SshKeyGenerateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SshKeyGenerateError = SshKeyGenerateErrors[keyof SshKeyGenerateErrors];

export type SshKeyGenerateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SshKeyUpdateData = {
    body: {
        name?: string;
        description?: string | null;
        lastUsedAt?: string | null;
        sshKeyId: string;
    };
    url: '/sshKey.update';
};

export type SshKeyUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SshKeyUpdateError = SshKeyUpdateErrors[keyof SshKeyUpdateErrors];

export type SshKeyUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitProviderGetAllData = {
    body?: never;
    url: '/gitProvider.getAll';
};

export type GitProviderGetAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitProviderGetAllError = GitProviderGetAllErrors[keyof GitProviderGetAllErrors];

export type GitProviderGetAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitProviderRemoveData = {
    body: {
        gitProviderId: string;
    };
    url: '/gitProvider.remove';
};

export type GitProviderRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitProviderRemoveError = GitProviderRemoveErrors[keyof GitProviderRemoveErrors];

export type GitProviderRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaCreateData = {
    body: {
        giteaId?: string;
        giteaUrl: string;
        redirectUri?: string;
        clientId?: string;
        clientSecret?: string;
        gitProviderId?: string;
        accessToken?: string;
        refreshToken?: string;
        expiresAt?: number;
        scopes?: string;
        lastAuthenticatedAt?: number;
        name: string;
        giteaUsername?: string;
        organizationName?: string;
    };
    url: '/gitea.create';
};

export type GiteaCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaCreateError = GiteaCreateErrors[keyof GiteaCreateErrors];

export type GiteaCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaOneData = {
    body?: never;
    path?: never;
    query: {
        giteaId: string;
    };
    url: '/gitea.one';
};

export type GiteaOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaOneError = GiteaOneErrors[keyof GiteaOneErrors];

export type GiteaOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaGiteaProvidersData = {
    body?: never;
    url: '/gitea.giteaProviders';
};

export type GiteaGiteaProvidersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaGiteaProvidersError = GiteaGiteaProvidersErrors[keyof GiteaGiteaProvidersErrors];

export type GiteaGiteaProvidersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaGetGiteaRepositoriesData = {
    body?: never;
    path?: never;
    query: {
        giteaId: string;
    };
    url: '/gitea.getGiteaRepositories';
};

export type GiteaGetGiteaRepositoriesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaGetGiteaRepositoriesError = GiteaGetGiteaRepositoriesErrors[keyof GiteaGetGiteaRepositoriesErrors];

export type GiteaGetGiteaRepositoriesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaGetGiteaBranchesData = {
    body?: never;
    path?: never;
    query: {
        owner: string;
        repositoryName: string;
        giteaId?: string;
    };
    url: '/gitea.getGiteaBranches';
};

export type GiteaGetGiteaBranchesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaGetGiteaBranchesError = GiteaGetGiteaBranchesErrors[keyof GiteaGetGiteaBranchesErrors];

export type GiteaGetGiteaBranchesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaTestConnectionData = {
    body: {
        giteaId?: string;
        organizationName?: string;
    };
    url: '/gitea.testConnection';
};

export type GiteaTestConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaTestConnectionError = GiteaTestConnectionErrors[keyof GiteaTestConnectionErrors];

export type GiteaTestConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaUpdateData = {
    body: {
        giteaId: string;
        giteaUrl: string;
        redirectUri?: string;
        clientId?: string;
        clientSecret?: string;
        gitProviderId: string;
        accessToken?: string;
        refreshToken?: string;
        expiresAt?: number;
        scopes?: string;
        lastAuthenticatedAt?: number;
        name: string;
        giteaUsername?: string;
        organizationName?: string;
    };
    url: '/gitea.update';
};

export type GiteaUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaUpdateError = GiteaUpdateErrors[keyof GiteaUpdateErrors];

export type GiteaUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GiteaGetGiteaUrlData = {
    body?: never;
    path?: never;
    query: {
        giteaId: string;
    };
    url: '/gitea.getGiteaUrl';
};

export type GiteaGetGiteaUrlErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GiteaGetGiteaUrlError = GiteaGetGiteaUrlErrors[keyof GiteaGetGiteaUrlErrors];

export type GiteaGetGiteaUrlResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketCreateData = {
    body: {
        bitbucketId?: string;
        bitbucketUsername?: string;
        appPassword?: string;
        bitbucketWorkspaceName?: string;
        gitProviderId?: string;
        authId: string;
        name: string;
    };
    url: '/bitbucket.create';
};

export type BitbucketCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketCreateError = BitbucketCreateErrors[keyof BitbucketCreateErrors];

export type BitbucketCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketOneData = {
    body?: never;
    path?: never;
    query: {
        bitbucketId: string;
    };
    url: '/bitbucket.one';
};

export type BitbucketOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketOneError = BitbucketOneErrors[keyof BitbucketOneErrors];

export type BitbucketOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketBitbucketProvidersData = {
    body?: never;
    url: '/bitbucket.bitbucketProviders';
};

export type BitbucketBitbucketProvidersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketBitbucketProvidersError = BitbucketBitbucketProvidersErrors[keyof BitbucketBitbucketProvidersErrors];

export type BitbucketBitbucketProvidersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketGetBitbucketRepositoriesData = {
    body?: never;
    path?: never;
    query: {
        bitbucketId: string;
    };
    url: '/bitbucket.getBitbucketRepositories';
};

export type BitbucketGetBitbucketRepositoriesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketGetBitbucketRepositoriesError = BitbucketGetBitbucketRepositoriesErrors[keyof BitbucketGetBitbucketRepositoriesErrors];

export type BitbucketGetBitbucketRepositoriesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketGetBitbucketBranchesData = {
    body?: never;
    path?: never;
    query: {
        owner: string;
        repo: string;
        bitbucketId?: string;
    };
    url: '/bitbucket.getBitbucketBranches';
};

export type BitbucketGetBitbucketBranchesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketGetBitbucketBranchesError = BitbucketGetBitbucketBranchesErrors[keyof BitbucketGetBitbucketBranchesErrors];

export type BitbucketGetBitbucketBranchesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketTestConnectionData = {
    body: {
        bitbucketId: string;
        bitbucketUsername?: string;
        workspaceName?: string;
    };
    url: '/bitbucket.testConnection';
};

export type BitbucketTestConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketTestConnectionError = BitbucketTestConnectionErrors[keyof BitbucketTestConnectionErrors];

export type BitbucketTestConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type BitbucketUpdateData = {
    body: {
        bitbucketId: string;
        bitbucketUsername?: string;
        appPassword?: string | null;
        bitbucketWorkspaceName?: string;
        gitProviderId: string;
        name: string;
        organizationId?: string;
    };
    url: '/bitbucket.update';
};

export type BitbucketUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type BitbucketUpdateError = BitbucketUpdateErrors[keyof BitbucketUpdateErrors];

export type BitbucketUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabCreateData = {
    body: {
        gitlabId?: string;
        gitlabUrl: string;
        applicationId?: string;
        redirectUri?: string;
        secret?: string;
        accessToken?: string | null;
        refreshToken?: string | null;
        groupName?: string;
        expiresAt?: number | null;
        gitProviderId?: string;
        authId: string;
        name: string;
    };
    url: '/gitlab.create';
};

export type GitlabCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabCreateError = GitlabCreateErrors[keyof GitlabCreateErrors];

export type GitlabCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabOneData = {
    body?: never;
    path?: never;
    query: {
        gitlabId: string;
    };
    url: '/gitlab.one';
};

export type GitlabOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabOneError = GitlabOneErrors[keyof GitlabOneErrors];

export type GitlabOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabGitlabProvidersData = {
    body?: never;
    url: '/gitlab.gitlabProviders';
};

export type GitlabGitlabProvidersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabGitlabProvidersError = GitlabGitlabProvidersErrors[keyof GitlabGitlabProvidersErrors];

export type GitlabGitlabProvidersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabGetGitlabRepositoriesData = {
    body?: never;
    path?: never;
    query: {
        gitlabId: string;
    };
    url: '/gitlab.getGitlabRepositories';
};

export type GitlabGetGitlabRepositoriesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabGetGitlabRepositoriesError = GitlabGetGitlabRepositoriesErrors[keyof GitlabGetGitlabRepositoriesErrors];

export type GitlabGetGitlabRepositoriesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabGetGitlabBranchesData = {
    body?: never;
    path?: never;
    query: {
        id?: number;
        owner: string;
        repo: string;
        gitlabId?: string;
    };
    url: '/gitlab.getGitlabBranches';
};

export type GitlabGetGitlabBranchesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabGetGitlabBranchesError = GitlabGetGitlabBranchesErrors[keyof GitlabGetGitlabBranchesErrors];

export type GitlabGetGitlabBranchesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabTestConnectionData = {
    body: {
        gitlabId?: string;
        groupName?: string;
    };
    url: '/gitlab.testConnection';
};

export type GitlabTestConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabTestConnectionError = GitlabTestConnectionErrors[keyof GitlabTestConnectionErrors];

export type GitlabTestConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GitlabUpdateData = {
    body: {
        gitlabId: string;
        gitlabUrl: string;
        applicationId?: string;
        redirectUri?: string;
        secret?: string;
        accessToken?: string | null;
        refreshToken?: string | null;
        groupName?: string;
        expiresAt?: number | null;
        gitProviderId: string;
        name: string;
    };
    url: '/gitlab.update';
};

export type GitlabUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GitlabUpdateError = GitlabUpdateErrors[keyof GitlabUpdateErrors];

export type GitlabUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GithubOneData = {
    body?: never;
    path?: never;
    query: {
        githubId: string;
    };
    url: '/github.one';
};

export type GithubOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GithubOneError = GithubOneErrors[keyof GithubOneErrors];

export type GithubOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GithubGetGithubRepositoriesData = {
    body?: never;
    path?: never;
    query: {
        githubId: string;
    };
    url: '/github.getGithubRepositories';
};

export type GithubGetGithubRepositoriesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GithubGetGithubRepositoriesError = GithubGetGithubRepositoriesErrors[keyof GithubGetGithubRepositoriesErrors];

export type GithubGetGithubRepositoriesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GithubGetGithubBranchesData = {
    body?: never;
    path?: never;
    query: {
        repo: string;
        owner: string;
        githubId?: string;
    };
    url: '/github.getGithubBranches';
};

export type GithubGetGithubBranchesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GithubGetGithubBranchesError = GithubGetGithubBranchesErrors[keyof GithubGetGithubBranchesErrors];

export type GithubGetGithubBranchesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GithubGithubProvidersData = {
    body?: never;
    url: '/github.githubProviders';
};

export type GithubGithubProvidersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GithubGithubProvidersError = GithubGithubProvidersErrors[keyof GithubGithubProvidersErrors];

export type GithubGithubProvidersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GithubTestConnectionData = {
    body: {
        githubId: string;
    };
    url: '/github.testConnection';
};

export type GithubTestConnectionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GithubTestConnectionError = GithubTestConnectionErrors[keyof GithubTestConnectionErrors];

export type GithubTestConnectionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GithubUpdateData = {
    body: {
        githubId: string;
        githubAppName?: string | null;
        githubAppId?: number | null;
        githubClientId?: string | null;
        githubClientSecret?: string | null;
        githubInstallationId?: string | null;
        githubPrivateKey?: string | null;
        githubWebhookSecret?: string | null;
        gitProviderId: string;
        name: string;
    };
    url: '/github.update';
};

export type GithubUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type GithubUpdateError = GithubUpdateErrors[keyof GithubUpdateErrors];

export type GithubUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerCreateData = {
    body: {
        name: string;
        description?: string | null;
        ipAddress: string;
        port: number;
        username: string;
        sshKeyId: string | null;
    };
    url: '/server.create';
};

export type ServerCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerCreateError = ServerCreateErrors[keyof ServerCreateErrors];

export type ServerCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerOneData = {
    body?: never;
    path?: never;
    query: {
        serverId: string;
    };
    url: '/server.one';
};

export type ServerOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerOneError = ServerOneErrors[keyof ServerOneErrors];

export type ServerOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerGetDefaultCommandData = {
    body?: never;
    path?: never;
    query: {
        serverId: string;
    };
    url: '/server.getDefaultCommand';
};

export type ServerGetDefaultCommandErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerGetDefaultCommandError = ServerGetDefaultCommandErrors[keyof ServerGetDefaultCommandErrors];

export type ServerGetDefaultCommandResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerAllData = {
    body?: never;
    url: '/server.all';
};

export type ServerAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerAllError = ServerAllErrors[keyof ServerAllErrors];

export type ServerAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerCountData = {
    body?: never;
    url: '/server.count';
};

export type ServerCountErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerCountError = ServerCountErrors[keyof ServerCountErrors];

export type ServerCountResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerWithSshKeyData = {
    body?: never;
    url: '/server.withSSHKey';
};

export type ServerWithSshKeyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerWithSshKeyError = ServerWithSshKeyErrors[keyof ServerWithSshKeyErrors];

export type ServerWithSshKeyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerSetupData = {
    body: {
        serverId: string;
    };
    url: '/server.setup';
};

export type ServerSetupErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerSetupError = ServerSetupErrors[keyof ServerSetupErrors];

export type ServerSetupResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerValidateData = {
    body?: never;
    path?: never;
    query: {
        serverId: string;
    };
    url: '/server.validate';
};

export type ServerValidateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerValidateError = ServerValidateErrors[keyof ServerValidateErrors];

export type ServerValidateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerSecurityData = {
    body?: never;
    path?: never;
    query: {
        serverId: string;
    };
    url: '/server.security';
};

export type ServerSecurityErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerSecurityError = ServerSecurityErrors[keyof ServerSecurityErrors];

export type ServerSecurityResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerSetupMonitoringData = {
    body: {
        serverId: string;
        metricsConfig: {
            server: {
                refreshRate: number;
                port: number;
                token: string;
                urlCallback: string;
                retentionDays: number;
                cronJob: string;
                thresholds: {
                    cpu: number;
                    memory: number;
                };
            };
            containers: {
                refreshRate: number;
                services: {
                    include?: Array<string>;
                    exclude?: Array<string>;
                };
            };
        };
    };
    url: '/server.setupMonitoring';
};

export type ServerSetupMonitoringErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerSetupMonitoringError = ServerSetupMonitoringErrors[keyof ServerSetupMonitoringErrors];

export type ServerSetupMonitoringResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerRemoveData = {
    body: {
        serverId: string;
    };
    url: '/server.remove';
};

export type ServerRemoveErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerRemoveError = ServerRemoveErrors[keyof ServerRemoveErrors];

export type ServerRemoveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerUpdateData = {
    body: {
        name: string;
        description?: string | null;
        serverId: string;
        ipAddress: string;
        port: number;
        username: string;
        sshKeyId: string | null;
        command?: string;
    };
    url: '/server.update';
};

export type ServerUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerUpdateError = ServerUpdateErrors[keyof ServerUpdateErrors];

export type ServerUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerPublicIpData = {
    body?: never;
    url: '/server.publicIp';
};

export type ServerPublicIpErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerPublicIpError = ServerPublicIpErrors[keyof ServerPublicIpErrors];

export type ServerPublicIpResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ServerGetServerMetricsData = {
    body?: never;
    path?: never;
    query: {
        url: string;
        token: string;
        dataPoints: string;
    };
    url: '/server.getServerMetrics';
};

export type ServerGetServerMetricsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ServerGetServerMetricsError = ServerGetServerMetricsErrors[keyof ServerGetServerMetricsErrors];

export type ServerGetServerMetricsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type StripeGetProductsData = {
    body?: never;
    url: '/stripe.getProducts';
};

export type StripeGetProductsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type StripeGetProductsError = StripeGetProductsErrors[keyof StripeGetProductsErrors];

export type StripeGetProductsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type StripeCreateCheckoutSessionData = {
    body: {
        productId: string;
        serverQuantity: number;
        isAnnual: boolean;
    };
    url: '/stripe.createCheckoutSession';
};

export type StripeCreateCheckoutSessionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type StripeCreateCheckoutSessionError = StripeCreateCheckoutSessionErrors[keyof StripeCreateCheckoutSessionErrors];

export type StripeCreateCheckoutSessionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type StripeCreateCustomerPortalSessionData = {
    body?: never;
    url: '/stripe.createCustomerPortalSession';
};

export type StripeCreateCustomerPortalSessionErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type StripeCreateCustomerPortalSessionError = StripeCreateCustomerPortalSessionErrors[keyof StripeCreateCustomerPortalSessionErrors];

export type StripeCreateCustomerPortalSessionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type StripeCanCreateMoreServersData = {
    body?: never;
    url: '/stripe.canCreateMoreServers';
};

export type StripeCanCreateMoreServersErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type StripeCanCreateMoreServersError = StripeCanCreateMoreServersErrors[keyof StripeCanCreateMoreServersErrors];

export type StripeCanCreateMoreServersResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SwarmGetNodesData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/swarm.getNodes';
};

export type SwarmGetNodesErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SwarmGetNodesError = SwarmGetNodesErrors[keyof SwarmGetNodesErrors];

export type SwarmGetNodesResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SwarmGetNodeInfoData = {
    body?: never;
    path?: never;
    query: {
        nodeId: string;
        serverId?: string;
    };
    url: '/swarm.getNodeInfo';
};

export type SwarmGetNodeInfoErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SwarmGetNodeInfoError = SwarmGetNodeInfoErrors[keyof SwarmGetNodeInfoErrors];

export type SwarmGetNodeInfoResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SwarmGetNodeAppsData = {
    body?: never;
    path?: never;
    query?: {
        serverId?: string;
    };
    url: '/swarm.getNodeApps';
};

export type SwarmGetNodeAppsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SwarmGetNodeAppsError = SwarmGetNodeAppsErrors[keyof SwarmGetNodeAppsErrors];

export type SwarmGetNodeAppsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type SwarmGetAppInfosData = {
    body?: never;
    path?: never;
    query: {
        appName: string;
        serverId?: string;
    };
    url: '/swarm.getAppInfos';
};

export type SwarmGetAppInfosErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type SwarmGetAppInfosError = SwarmGetAppInfosErrors[keyof SwarmGetAppInfosErrors];

export type SwarmGetAppInfosResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiOneData = {
    body?: never;
    path?: never;
    query: {
        aiId: string;
    };
    url: '/ai.one';
};

export type AiOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiOneError = AiOneErrors[keyof AiOneErrors];

export type AiOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiGetModelsData = {
    body?: never;
    path?: never;
    query: {
        apiUrl: string;
        apiKey: string;
    };
    url: '/ai.getModels';
};

export type AiGetModelsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiGetModelsError = AiGetModelsErrors[keyof AiGetModelsErrors];

export type AiGetModelsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiCreateData = {
    body: {
        name: string;
        apiUrl: string;
        apiKey: string;
        model: string;
        isEnabled: boolean;
    };
    url: '/ai.create';
};

export type AiCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiCreateError = AiCreateErrors[keyof AiCreateErrors];

export type AiCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiUpdateData = {
    body: {
        aiId: string;
        name?: string;
        apiUrl?: string;
        apiKey?: string;
        model?: string;
        isEnabled?: boolean;
        createdAt?: string;
    };
    url: '/ai.update';
};

export type AiUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiUpdateError = AiUpdateErrors[keyof AiUpdateErrors];

export type AiUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiGetAllData = {
    body?: never;
    url: '/ai.getAll';
};

export type AiGetAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiGetAllError = AiGetAllErrors[keyof AiGetAllErrors];

export type AiGetAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiGetData = {
    body?: never;
    path?: never;
    query: {
        aiId: string;
    };
    url: '/ai.get';
};

export type AiGetErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiGetError = AiGetErrors[keyof AiGetErrors];

export type AiGetResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiDeleteData = {
    body: {
        aiId: string;
    };
    url: '/ai.delete';
};

export type AiDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiDeleteError = AiDeleteErrors[keyof AiDeleteErrors];

export type AiDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiSuggestData = {
    body: {
        aiId: string;
        input: string;
        serverId?: string;
    };
    url: '/ai.suggest';
};

export type AiSuggestErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiSuggestError = AiSuggestErrors[keyof AiSuggestErrors];

export type AiSuggestResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AiDeployData = {
    body: {
        projectId: string;
        id: string;
        dockerCompose: string;
        envVariables: string;
        serverId?: string;
        name: string;
        description: string;
        domains?: Array<{
            host: string;
            port: number;
            serviceName: string;
        }>;
        configFiles?: Array<{
            filePath: string;
            content: string;
        }>;
    };
    url: '/ai.deploy';
};

export type AiDeployErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type AiDeployError = AiDeployErrors[keyof AiDeployErrors];

export type AiDeployResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationCreateData = {
    body: {
        name: string;
        logo?: string;
    };
    url: '/organization.create';
};

export type OrganizationCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationCreateError = OrganizationCreateErrors[keyof OrganizationCreateErrors];

export type OrganizationCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationAllData = {
    body?: never;
    url: '/organization.all';
};

export type OrganizationAllErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationAllError = OrganizationAllErrors[keyof OrganizationAllErrors];

export type OrganizationAllResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationOneData = {
    body?: never;
    path?: never;
    query: {
        organizationId: string;
    };
    url: '/organization.one';
};

export type OrganizationOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationOneError = OrganizationOneErrors[keyof OrganizationOneErrors];

export type OrganizationOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationUpdateData = {
    body: {
        organizationId: string;
        name: string;
        logo?: string;
    };
    url: '/organization.update';
};

export type OrganizationUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationUpdateError = OrganizationUpdateErrors[keyof OrganizationUpdateErrors];

export type OrganizationUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationDeleteData = {
    body: {
        organizationId: string;
    };
    url: '/organization.delete';
};

export type OrganizationDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationDeleteError = OrganizationDeleteErrors[keyof OrganizationDeleteErrors];

export type OrganizationDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationAllInvitationsData = {
    body?: never;
    url: '/organization.allInvitations';
};

export type OrganizationAllInvitationsErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationAllInvitationsError = OrganizationAllInvitationsErrors[keyof OrganizationAllInvitationsErrors];

export type OrganizationAllInvitationsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type OrganizationRemoveInvitationData = {
    body: {
        invitationId: string;
    };
    url: '/organization.removeInvitation';
};

export type OrganizationRemoveInvitationErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type OrganizationRemoveInvitationError = OrganizationRemoveInvitationErrors[keyof OrganizationRemoveInvitationErrors];

export type OrganizationRemoveInvitationResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ScheduleCreateData = {
    body: {
        scheduleId?: string;
        name: string;
        cronExpression: string;
        appName?: string;
        serviceName?: string | null;
        shellType?: 'bash' | 'sh';
        scheduleType?: 'application' | 'compose' | 'server' | 'dokploy-server';
        command: string;
        script?: string | null;
        applicationId?: string | null;
        composeId?: string | null;
        serverId?: string | null;
        userId?: string | null;
        enabled?: boolean;
        createdAt?: string;
    };
    url: '/schedule.create';
};

export type ScheduleCreateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ScheduleCreateError = ScheduleCreateErrors[keyof ScheduleCreateErrors];

export type ScheduleCreateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ScheduleUpdateData = {
    body: {
        scheduleId: string;
        name: string;
        cronExpression: string;
        appName?: string;
        serviceName?: string | null;
        shellType?: 'bash' | 'sh';
        scheduleType?: 'application' | 'compose' | 'server' | 'dokploy-server';
        command: string;
        script?: string | null;
        applicationId?: string | null;
        composeId?: string | null;
        serverId?: string | null;
        userId?: string | null;
        enabled?: boolean;
        createdAt?: string;
    };
    url: '/schedule.update';
};

export type ScheduleUpdateErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ScheduleUpdateError = ScheduleUpdateErrors[keyof ScheduleUpdateErrors];

export type ScheduleUpdateResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ScheduleDeleteData = {
    body: {
        scheduleId: string;
    };
    url: '/schedule.delete';
};

export type ScheduleDeleteErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ScheduleDeleteError = ScheduleDeleteErrors[keyof ScheduleDeleteErrors];

export type ScheduleDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ScheduleListData = {
    body?: never;
    path?: never;
    query: {
        id: string;
        scheduleType: 'application' | 'compose' | 'server' | 'dokploy-server';
    };
    url: '/schedule.list';
};

export type ScheduleListErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ScheduleListError = ScheduleListErrors[keyof ScheduleListErrors];

export type ScheduleListResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ScheduleOneData = {
    body?: never;
    path?: never;
    query: {
        scheduleId: string;
    };
    url: '/schedule.one';
};

export type ScheduleOneErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ScheduleOneError = ScheduleOneErrors[keyof ScheduleOneErrors];

export type ScheduleOneResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ScheduleRunManuallyData = {
    body: {
        scheduleId: string;
    };
    url: '/schedule.runManually';
};

export type ScheduleRunManuallyErrors = {
    /**
     * Error response
     */
    default: {
        message: string;
        code: string;
        issues?: Array<{
            message: string;
        }>;
    };
};

export type ScheduleRunManuallyError = ScheduleRunManuallyErrors[keyof ScheduleRunManuallyErrors];

export type ScheduleRunManuallyResponses = {
    /**
     * Successful response
     */
    200: unknown;
};